[{"categories":["Programming"],"content":" 注意 本文内容来源于：【Github】后端面试题集 🧨 什么是channel，为什么它可以做到线程安全？ 展开查看详情 Channel是Go中的⼀个核⼼类型，可以把它看成⼀个管道，通过它并发核⼼单元就可以发送或者接收数据进⾏通讯(communication),Channel也可以理解是⼀个先进先出的队列，通过管道进⾏通信。 Golang的Channel,发送⼀个数据到Channel 和 从Channel接收⼀个数据 都是 原⼦性的。⽽且Go的设计思想就是:不要通过共享内存来通信，⽽是通过通信来共享内存，前者就是传统的加锁，后者就是Channel。也就是说，设计Channel的主要⽬的就是在多任务间传递数据的，这当然是安全的。 ✨ 读写锁或者互斥锁读的时候能写吗? --查看答案-- 答案：Go中读写锁包括读锁和写锁，多个读线程可以同时访问共享数据；写线程必须等待所有读线程都释放锁以后，才能取得锁；同样的，读线程必须等待写线程释放锁后，才能取得锁，也就是说读写锁要确保的是如下互斥关系，可以同时读，但是读-写，写-写都是互斥的。 🎈 Channel是同步的还是异步的. 展开查看详情 Channel是异步进⾏的。 channel存在3种状态： nil，未初始化的状态，只进⾏了声明，或者⼿动赋值为nil nil，未初始化的状态，只进⾏了声明，或者⼿动赋值为nil closed，已关闭，千万不要误认为关闭channel后，channel的值是nil 🎉 下列哪个类型可以使⽤ cap()函数？ A. array B. slice C. map D. channel --查看答案-- 答案：A B D；array 返回数组的元素个数；slice 返回 slice 的最⼤容量；channel 返回 channel 的容量； 🎊 Data Race问题怎么解决？能不能不加锁解决这个问题？ 展开查看详情 同步访问共享数据是处理数据竞争的⼀种有效的⽅法.golang在1.1之后引⼊了竞争检测机制，可以使⽤ go run -race 或者 go build -race来进⾏静态检测。 其在内部的实现是,开启多个协程执⾏同⼀个命令， 并且记录下每个变量的状态. 竞争检测器基于C/C++的ThreadSanitizer 运⾏时库，该库在Google内部代码基地和Chromium找到许多错误。这个技术在2012年九⽉集成到Go中，从那时开始，它已经在标准库中检测到42个竞争条件。现在，它已经是我们持续构建过程的⼀部分，当竞争条件出现时，它会继续捕捉到这些错误。 竞争检测器已经完全集成到Go⼯具链中，仅仅添加-race标志到命令⾏就使⽤了检测器。 $ go test -race mypkg // 测试包 $ go run -race mysrc.go // 编译和运⾏程序 $ go build -race mycmd // 构建程序 $ go install -race mypkg // 安装程序 要想解决数据竞争的问题可以使⽤互斥锁sync.Mutex,解决数据竞争(Data race),也可以使⽤管道解决,使⽤管道的效率要⽐互斥锁⾼. 🎋 如何在运⾏时检查变量类型？ --查看答案-- 答案：类型开关是在运⾏时检查变量类型的最佳⽅式。类型开关按类型⽽不是值来评估变量。每个 Switch ⾄少包含⼀个case，⽤作条件语句，和⼀个 defaultcase，如果没有⼀个 case 为真，则执⾏。 🎍 Go 两个接⼝之间可以存在什么关系？ --查看答案-- 答案：如果两个接⼝有相同的⽅法列表，那么他们就是等价的，可以相互赋值。如果接⼝ A的⽅法列表是接⼝ B的⽅法列表的⾃⼰，那么接⼝ B可以赋值给接⼝ A。接⼝查询是否成功，要在运⾏期才能够确定。 🎎 关于map，下⾯说法正确的是？ A. map 反序列化时 json.unmarshal() 的⼊参必须为 map 的地址； B. 在函数调⽤中传递 map，则⼦函数中对 map 元素的增加不会导致⽗函数中 map 的修改； C. 在函数调⽤中传递 map，则⼦函数中对 map 元素的修改不会导致⽗函数中 map 的修改； D. 不能使⽤内置函数 delete() 删除 map 的元素 --查看答案-- 答案：A 🎏 关于同步锁，下⾯说法正确的是？ A. 当⼀个 goroutine 获得了 Mutex 后，其他 goroutine 就只能乖乖的等待，除⾮该 goroutine 释放这个 Mutex； B. RWMutex 在读锁占⽤的情况下，会阻⽌写，但不阻⽌读； C. RWMutex 在写锁占⽤情况下，会阻⽌任何其他 goroutine（⽆论读和写）进来，整个锁相当于由该 goroutine独占； D. Lock() 操作需要保证有 Unlock() 或 RUnlock() 调⽤与之对应； --查看答案-- 答案：A B C 🎐 Go 当中同步锁有什么特点？作⽤是什么 展开查看详情 当⼀个 Goroutine（协程）获得了 Mutex 后，其他 Gorouline（协程）就只能乖乖的等待，除⾮该 gorouline 释放了该 MutexRWMutex在读锁占⽤的情况下，会阻⽌写，但不阻⽌读 RWMutex 在写锁占⽤情况下，会阻⽌任何其他 goroutine（⽆论读和写）进来，整个锁相当于由该 goroutine 独占同步锁的作⽤是保证资源在使⽤时的独有性，不会因为并发⽽导致数据错乱，保证系统的稳定性。 🎑 Go 语⾔当中 Channel（通道）有什么特点，需要注意什么？ --查看答案-- 答案：如果给⼀个 nil 的 channel 发送数据，会造成永远阻塞如果从⼀个 nil 的 channel 中接收数据，也会造成永久爱阻塞给⼀个已经关闭的 channel 发送数据，会引起 pannic 从⼀个已经关闭的 channel 接收数据，如果缓冲区中为空，则返回⼀个零值。 🎀 Go 语⾔当中 Channel 缓冲有什么特点？ --查看答案-- 答案：⽆缓冲的 channel 是同步的，⽽有缓冲的 channel 是⾮同步的。 🎁 关于channel，下⾯语法正确的是? A. var ch chan int B. ch := make(chan int) C. \u003c- ch D. ch \u003c- --查看答案-- 答案：A B C；解析：写 chan 时，\u003c- 右端必须要有值 🎗️ Go 语⾔中 cap 函数可以作⽤于那些内容？ 展开查看详情 cap 函数在讲引⽤的问题中已经提到，可以作⽤于的类型有： array(数组) slice(切⽚) channel(通道) 🎟️ go convey 是什么？⼀般⽤来做什么？ 展开查看详情 go convey 是⼀个⽀持 golang 的单元测试框架 go convey 是⼀个⽀持 golang 的单元测试框架 go convey 提供了丰富的断⾔简化测试⽤例的编写 🎖️ Go 语⾔当中 new 和 make 有什么区别吗？ 展开查看详情 new的作⽤是初始化⼀个纸箱类型的指针 new函数是内建函数，函数定义： func new(Type)*Type 使⽤ new函数来分配空间 传递给 new函数的是⼀个类型，⽽不是⼀个值 返回值是指向这个新⾮配的地址的指针 🏆 Go 语⾔中 make 的作⽤是什么？ make的作⽤是为 slice, map or chan 的初始化然后返回引⽤ make函数是内建函数，函数定义： func make(Type, size IntegerType) Type make(T, args)函数的⽬的和 new(T)不同仅仅⽤于创建 slice, map, channel ⽽且返回类型是实例。 🏅 Printf(),Sprintf(),FprintF()都是格式化输出，有什么不同？ --查看答案-- 答案：虽然这三个函数，都是格式化输出，但是输出的⽬标不⼀样 Printf 是标准输出，⼀般是屏幕，也可以重定向。Sprintf()是把格式化字符串输出到指定的字符串中。 Fprintf()是吧格式化字符串输出到⽂件中。 ⚽ Go 语⾔当中数组和切⽚的区别是什么？ 展开查看详情 数组：数组固定⻓度数组⻓度是数组类型的⼀部分，所以[3]int 和[4]int 是两种不同的数组类型数组需要指定⼤⼩，不指定也会根据处初始化对的⾃动推算出⼤⼩，不可改变数组是通过值传递的 切⽚：切⽚可以改变⻓度切⽚是轻量级的数据结构，三个属性，指针，⻓度，容量不需要指定⼤⼩切⽚是地址传递（引⽤传递）可以通过数组来初始化，也可以通过内置函数 make()来初始化，初始化的时候 len=cap，然后进⾏扩容。 ⚾ Go 语⾔当中值传递和地址传递（引⽤传递）如何运⽤？有什么区别？举例说明 展开查看详情 值传递只会把参数的值复制⼀份放进对应的函数，两个变量的地址不同，不可相互修改。 地址传递(引⽤传递)会将变量本身传⼊对应的函数，在函数中可以对该变量进⾏值内容的修改。 🥎 Go 语⾔当中数组和切⽚在传递的时候的区别是什么？ --查看答案-- 答案：1. 数组是值传递；2. 切⽚是引⽤传递 🏀 Go 语⾔是如何实现切⽚扩容的？ 展开查看详情 func main(){ arr := make([]int,0) for i := 0; i \u003c 2000; i++{ fmt.Println(\"len 为\", len(arr),\"cap 为\", cap(arr)) arr = append(arr, i) } } 结果：依次是0","date":"2022-10-16","objectID":"/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8603/:0:0","tags":["interview","Golang"],"title":"【摘抄】后端面试题集03","uri":"/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8603/"},{"categories":["Programming"],"content":" 注意 本文内容来源于：【Github】后端面试题集 🎆 说下Go中的锁有哪些?三种锁，读写锁，互斥锁，还有map的安全的锁? Go中的三种锁包括:互斥锁,读写锁,sync.Map的安全的锁. 互斥锁 Go并发程序对共享资源进⾏访问控制的主要⼿段，由标准库代码包中sync中的Mutex结构体表示。 //Mutex 是互斥锁， 零值是解锁的互斥锁， ⾸次使⽤后不得复制互斥锁。 type Mutex struct { state int32 sema uint32 } sync.Mutex包中的类型只有两个公开的指针⽅法Lock和Unlock。 //Locker表示可以锁定和解锁的对象。 type Locker interface { Lock() Unlock() } //锁定当前的互斥量 //如果锁已被使⽤，则调⽤goroutine //阻塞直到互斥锁可⽤。 func (m *Mutex) Lock() //对当前互斥量进⾏解锁 //如果在进⼊解锁时未锁定m，则为运⾏时错误。 //锁定的互斥锁与特定的goroutine⽆关。 //允许⼀个goroutine锁定Mutex然后安排另⼀个goroutine来解锁它。 func (m *Mutex) Unlock() 声明⼀个互斥锁： var mutex sync.Mutex 不像C或Java的锁类⼯具，我们可能会犯⼀个错误：忘记及时解开已被锁住的锁，从⽽导致流程异常。但Go由于存在defer，所以此类问题出现的概率极低。关于defer解锁的⽅式如下： var mutex sync.Mutex func Write() { mutex.Lock() defer mutex.Unlock() } 如果对⼀个已经上锁的对象再次上锁，那么就会导致该锁定操作被阻塞，直到该互斥锁回到被解锁状态. ort ( \"fmt\" \"sync\" \"time\" ) func main() { var mutex sync.Mutex fmt.Println(\"begin lock\") mutex.Lock() fmt.Println(\"get locked\") for i := 1; i \u003c= 3; i++ { go func(i int) { fmt.Println(\"begin lock \", i) mutex.Lock() fmt.Println(\"get locked \", i) }(i) } time.Sleep(time.Second) fmt.Println(\"Unlock the lock\") mutex.Unlock() fmt.Println(\"get unlocked\") time.Sleep(time.Second) } 我们在for循环之前开始加锁，然后在每⼀次循环中创建⼀个协程，并对其加锁，但是由于之前已经加锁了，所以这个for循环中的加锁会陷⼊阻塞直到main中的锁被解锁， time.Sleep(time.Second) 是为了能让系统有⾜够的时间运⾏for循环，输出结果如下： \u003e go run mutex.go begin lock get locked begin lock 3 begin lock 1 begin lock 2 Unlock the lock get unlocked get locked 3 这⾥可以看到解锁后，三个协程会重新抢夺互斥锁权，最终协程3获胜。 互斥锁锁定操作的逆操作并不会导致协程阻塞，但是有可能导致引发⼀个⽆法恢复的运⾏时的panic，⽐如对⼀个未锁定的互斥锁进⾏解锁时就会发⽣panic。避免这种情况的最有效⽅式就是使⽤defer。 我们知道如果遇到panic，可以使⽤recover⽅法进⾏恢复，但是如果对重复解锁互斥锁引发的panic却是⽆⽤的（Go 1.8及以后）。 package main import ( \"fmt\" \"sync\" ) func main() { defer func() { fmt.Println(\"Try to recover the panic\") if p := recover(); p != nil { fmt.Println(\"recover the panic : \", p) } }() var mutex sync.Mutex fmt.Println(\"begin lock\") mutex.Lock() fmt.Println(\"get locked\") fmt.Println(\"unlock lock\") mutex.Unlock() fmt.Println(\"lock is unlocked\") fmt.Println(\"unlock lock again\") mutex.Unlock() } 运⾏: \u003e go run mutex.go begin lock get locked unlock lock l error: sync: unlock of unlocked mutex goroutine 1 [running]: runtime.throw(0x4bc1a8, 0x1e) /home/keke/soft/go/src/runtime/panic.go:617 +0x72 fp=0xc000084ea8 sp=0xc000084e78 pc=0x427ba2 sync.throw(0x4bc1a8, 0x1e) /home/keke/soft/go/src/runtime/panic.go:603 +0x35 fp=0xc000084ec8 sp=0xc000084ea8 pc=0x427b25 sync.(*Mutex).Unlock(0xc00001a0c8) /home/keke/soft/go/src/sync/mutex.go:184 +0xc1 fp=0xc000084ef0 sp=0xc000084ec8 pc=0x45f821 main.main() /home/keke/go/Test/mutex.go:25 +0x25f fp=0xc000084f98 sp=0xc000084ef0 pc=0x486c1f runtime.main() /home/keke/soft/go/src/runtime/proc.go:200 +0x20c fp=0xc000084fe0 sp=0xc000084f98 pc=0x4294ec runtime.goexit() /home/keke/soft/go/src/runtime/asm_amd64.s:1337 +0x1 fp=0xc000084fe8 sp=0xc000084fe0 pc=0x450ad1 exit status 2 这⾥试图对重复解锁引发的panic进⾏recover，但是我们发现操作失败，虽然互斥锁可以被多个协程共享，但还是建议将对同⼀个互斥锁的加锁解锁操作放在同⼀个层次的代码中。 读写锁 读写锁是针对读写操作的互斥锁，可以分别针对读操作与写操作进⾏锁定和解锁操作 。 读写锁的访问控制规则如下： 多个写操作之间是互斥的 写操作与读操作之间也是互斥的 多个读操作之间不是互斥的 在这样的控制规则下，读写锁可以⼤⼤降低性能损耗。 在Go的标准库代码包中sync中的RWMutex结构体表示为: // RWMutex是⼀个读/写互斥锁，可以由任意数量的读操作或单个写操作持有。 // RWMutex的零值是未锁定的互斥锁。 //⾸次使⽤后，不得复制RWMutex。 //如果goroutine持有RWMutex进⾏读取⽽另⼀个goroutine可能会调⽤Lock，那么在释放初始读锁之前， goroutine不应该期望能够获取读锁定。 //特别是，这种禁⽌递归读锁定。 这是为了确保锁最终变得可⽤; 阻⽌的锁定会阻⽌新读操作获取锁定。 type RWMutex struct { w Mutex //如果有待处理的写操作就持有 writerSem uint32 // 写操作等待读操作完成的信号量 readerSem uint32 //读操作等待写操作完成的信号量 readerCount int32 // 待处理的读操作数量 readerWait int32 // number of departing readers } sync中的RWMutex有以下⼏种⽅法： //对读操作的锁定 func (rw *RWMutex) RLock() //对读操作的解锁 func (rw *RWMutex) RUnlock() //对写操作的锁定 func (rw *RWMutex) Lock() //对写操作的解锁 func (rw *RWMutex) Unlock() //返回⼀个实现了sync.Locker接⼝类型的值，实际上是回调rw.RLock and rw.RUnlock. func (rw *RWMutex) RLocker() Locker Unlock⽅法会试图唤醒所有想进⾏读锁定⽽被阻塞的协程，⽽ RUnlock⽅法只会在已⽆任何读锁定的情况下，试图唤醒⼀个因欲进⾏写锁定⽽被阻塞的协程。若对⼀个未被写锁定的读写锁进⾏写解锁，就会引发⼀个不可恢复的panic，同理对⼀个未被读锁定的读写锁进⾏读写锁也会如此。 由于读写锁控制下的多个读操作之间不是互斥的，因此对于读解锁更容易被忽视。对于同⼀个读写锁，添加多少个读锁定，就必要有等量的读解锁，这样才能其他协程有机会进⾏操作。 package main import ( \"fmt\" \"sync\" \"ti","date":"2022-10-16","objectID":"/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8602/:0:0","tags":["interview","Golang"],"title":"【摘抄】后端面试题集02","uri":"/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8602/"},{"categories":["Programming"],"content":" 注意 本文内容来源于：【Github】后端面试题集 🍦 关于整型切⽚的初始化，下⾯正确的是？ A. s := make([]int) B. s := make([]int, 0) C. s := make([]int, 5, 10) D. s := []int{1, 2, 3, 4, 5} --查看答案-- 答案：B C D 🍧 下列代码是否会触发异常？ func Test59(t *testing.T) { runtime.GOMAXPROCS(1) intChan := make(chan int, 1) stringChan := make(chan string, 1) intChan \u003c- 1 stringChan \u003c- \"hello\" select { case value := \u003c-intChan: fmt.Println(value) case value := \u003c-stringChan: panic(value) } } --查看答案-- 答案：不⼀定，当两个chan同时有值时，select 会随机选择⼀个可⽤通道做收发操作 🍨 关于channel的特性，下⾯说法正确的是？ A. 给⼀个 nil channel 发送数据，造成永远阻塞 B. 从⼀个 nil channel 接收数据，造成永远阻塞 C. 给⼀个已经关闭的 channel 发送数据，引起 panic D. 从⼀个已经关闭的 channel 接收数据，如果缓冲区中为空，则返回⼀个零值 --查看答案-- 答案：A B C D 🍩 下列代码有什么问题？ const i = 100 var j = 123 func main() { fmt.Println(\u0026j, j) fmt.Println(\u0026i, i) } --查看答案-- 答案：Go语⾔中，常量⽆法寻址, 是不能进⾏取指针操作的 🍪 下列代码输出什么？ func Test62(t *testing.T) { x := []string{\"a\", \"b\", \"c\"} for v := range x { fmt.Print(v) } } --查看答案-- 答案：012， 解析：range ⼀个返回值时，这个值是下标，两个值时，第⼀个是下标，第⼆个是值，当 x 为 map时，第⼀个是key，第⼆个是value 🎂 关于⽆缓冲和有冲突的channel，下⾯说法正确的是？ A. ⽆缓冲的channel是默认的缓冲为1的channel； B. ⽆缓冲的channel和有缓冲的channel都是同步的； C. ⽆缓冲的channel和有缓冲的channel都是⾮同步的； D. ⽆缓冲的channel是同步的，⽽有缓冲的channel是⾮同步的； --查看答案-- 答案：D 🍰 下列代码输出什么？ func Foo(x interface{}) { if x == nil { fmt.Println(\"empty interface\") return } fmt.Println(\"non-empty interface\") } func Test64(t *testing.T) { var x *int = nil Foo(x) } --查看答案-- 答案：non-empty interface，解析：接⼝除了有静态类型，还有动态类型和动态值，当且仅当动态值和动态类型都为 nil 时，接⼝类型值才为 nil。这⾥的 x 的动态类型是 *int，所以 x 不为 nil 🧁 关于select机制，下⾯说法正确的是? A. select机制⽤来处理异步IO问题； B. select机制最⼤的⼀条限制就是每个case语句⾥必须是⼀个IO操作； C. golang在语⾔级别⽀持select关键字； D. select关键字的⽤法与switch语句⾮常类似，后⾯要带判断条件； --查看答案-- 答案：A B C 🥧 关于字符串拼接,下列正确的是? A. str := ‘abc’ + ‘123’ B. str := “abc” + “123” C. str ：= ‘123’ + “abc” D. fmt.Sprintf(“abc%d”, 123) --查看答案-- 答案：B D 双引号⽤来表示字符串 string，其实质是⼀个 byte 类型的数组，单引号表示 rune 类型。 🍫 连nil切⽚和空切⽚⼀不⼀样都不清楚？ 连nil切片和空切片一不一样都不清楚？那BAT面试官只好让你回去等通知了。 🍬 golang⾯试题：字符串转成byte数组，会发⽣内存拷⻉吗？ golang⾯试题：字符串转成byte数组，会发⽣内存拷⻉吗？ 🍭 golang⾯试题：翻转含有中⽂、数字、英⽂字⺟的字符串 golang⾯试题：翻转含有中⽂、数字、英⽂字⺟的字符串 🍮 golang⾯试题：拷⻉⼤切⽚⼀定⽐⼩切⽚代价⼤吗？ golang⾯试题：拷⻉⼤切⽚⼀定⽐⼩切⽚代价⼤吗？ 🍯 golang⾯试题：json包变量不加tag会怎么样？ golang⾯试题：json包变量不加tag会怎么样？ 🍼 golang⾯试题：reflect（反射包）如何获取字段tag？为什么json包不能导出私有变量的tag？ golang⾯试题：reflect（反射包）如何获取字段tag？为什么json包不能导出私有变量的tag？ 🥛 昨天那个在for循环⾥append元素的同事，今天还在么？ 昨天那个在for循环⾥append元素的同事，今天还在么？ ☕ go struct能不能⽐较 --查看答案-- 答案：相同struct类型的可以⽐较；不同struct类型的不可以⽐较,编译都不过，类型不匹配 🍵 Go ⽀持什么形式的类型转换？将整数转换为浮点数。 --查看答案-- 答案：Go ⽀持显式类型转换以满⾜其严格的类型要求。 🍶 Log包线程安全吗？ --查看答案-- 答案：Golang的标准库提供了log的机制，但是该模块的功能较为简单（看似简单，其实他有他的设计思路）。在输出的位置做了线程安全的保护。 🍾 Goroutine和线程的区别? 展开查看详情 从调度上看，goroutine的调度开销远远⼩于线程调度开销。 OS的线程由OS内核调度，每隔⼏毫秒，⼀个硬件时钟中断发到CPU，CPU调⽤⼀个调度器内核函数。这个函数暂停当前正在运⾏的线程，把他的寄存器信息保存到内存中，查看线程列表并决定接下来运⾏哪⼀个线程，再从内存中恢复线程的注册表信息，最后继续执⾏选中的线程。这种线程切换需要⼀个完整的上下⽂切换：即保存⼀个线程的状态到内存，再恢复另外⼀个线程的状态，最后更新调度器的数据结构。某种意义上，这种操作还是很慢的。 Go运⾏的时候包涵⼀个⾃⼰的调度器，这个调度器使⽤⼀个称为⼀个M:N调度技术，m个goroutine到n个os线程（可以⽤GOMAXPROCS来控制n的数量），Go的调度器不是由硬件时钟来定期触发的，⽽是由特定的go语⾔结构来触发的，他不需要切换到内核语境，所以调度⼀个goroutine⽐调度⼀个线程的成本低很多。 从栈空间上，goroutine的栈空间更加动态灵活。 每个OS的线程都有⼀个固定⼤⼩的栈内存，通常是2MB，栈内存⽤于保存在其他函数调⽤期间哪些正在执⾏或者临时暂停的函数的局部变量。这个固定的栈⼤⼩，如果对于goroutine来说，可能是⼀种巨⼤的浪费。作为对⽐goroutine在⽣命周期开始只有⼀个很⼩的栈，典型情况是2KB, 在go程序中，⼀次创建⼗万左右的goroutine也不罕⻅（2KB*100,000=200MB）。⽽且goroutine的栈不是固定⼤⼩，它可以按需增⼤和缩⼩，最⼤限制可以到1GB。 goroutine没有⼀个特定的标识。 在⼤部分⽀持多线程的操作系统和编程语⾔中，线程有⼀个独特的标识，通常是⼀个整数或者指针，这个特性可以让我们构建⼀个线程的局部存储，本质是⼀个全局的map，以线程的标识作为键，这样每个线程可以独⽴使⽤这个map存储和获取值，不受其他线程⼲扰。 goroutine中没有可供程序员访问的标识，原因是⼀种纯函数的理念，不希望滥⽤线程局部存储导致⼀个不健康的超距作⽤，即函数的⾏为不仅取决于它的参数，还取决于运⾏它的线程标识。 🍷下列哪⼀⾏会panic? func Test76(t *testing.T) { var x interface{} var y interface{} = []int{3, 5} _ = x == x _ = x == y _ = y == y } --查看答案-- 答案：_ = y == y 会发⽣panic, 因为两个⽐较值的动态类型为同⼀个不可⽐较类型 🍷 下列哪⾏代码会panic? func Test77(t *testing.T) { x := make([]int, 2, 10) _ = x[6:10] _ = x[6:] _ = x[2:] } --查看答案-- 答案：_ = x[6:] 这⼀⾏会发⽣panic, 截取符号 [i:j]，如果 j 省略，默认是原切⽚或者数组的⻓度，x 的⻓度是 2，⼩于起始下标 6 ，所以 panic 🍸 什么是 Goroutine？你如何停⽌它？ 展开查看详情 ⼀个 Goroutine 是⼀个函数或⽅法执⾏同时旁边其他任何够程采⽤了特殊的 Goroutine 线程。Goroutine 线程⽐标准线程更轻量级，⼤多数 Golang 程序同时使⽤数千个 g、Goroutine。 要创建 Goroutine，请 go 在函数声明之前添加go关键字。 您可以通过向 Go","date":"2022-10-15","objectID":"/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8601/:0:0","tags":["interview","Golang"],"title":"【摘抄】后端面试题集01","uri":"/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8601/"},{"categories":["Programming"],"content":" 注意 本文内容来源于：【知乎】Go常见面试题【由浅入深】2022版 🍇 = 和 := 的区别 --查看答案-- =是赋值变量，:=是定义变量 🍈 指针的作用 展开查看详情 获取变量的值 import fmt func main(){ a := 1 p := \u0026a // 获取地址 fmt.Prinf(*p) // 获取值 } 改变变量的值 // 交换函数 func swap(a,b *int){ *a,*b = *b,*a; } 用指针替代传入函数 type A struct{} func (a *A) fun(){} 🍉 Go有异常类型吗 展开查看详情 有。 Go用error类型代替try…catch _,err := funcDemo() if err != nil { fmt.Println(err) return } 也可以用errors.New()来定义自己的异常。 type errorString struct { s string } func (e *errorString) Error() string { return e.s } // 多一个函数当作构造函数 func New(text string) error { return \u0026errorString{text} } 🍊 什么是协程(Goroutine) --查看答案-- 协程是用户状态轻量级线程，它是线程调度的基本单位 展开了解更多 通常在函数前加上go关键字就能实现并发。一个Goroutine会以一个很小的栈启动2KB或4KB，当遇到栈空间不足时，栈会自动伸缩， 因此可以轻易实现成千上万个goroutine同时启动。 🍋 如何高效地拼接字符串 --查看答案-- strings.Join ≈ strings.Builder \u003e bytes.Buffer \u003e “+” \u003e fmt.Sprintf 展开了解更多 利用加号(+) 使用+操作符进行拼接时，会对字符串进行遍历，计算并开辟一个新的空间来存储原来的两个字符串。 fmt.Sprintf 由于采用了接口参数，必须要用反射获取值，因此有性能损耗。 strings.Builder 用WriteString()进行拼接，内部实现是指针+切片，同时String()返回拼接后的字符串，它是直接把[]byte转换为string，从而避免变量拷贝。 bytes.Buffer bytes.Buffer是一个一个缓冲byte类型的缓冲器，这个缓冲器里存放着都是byte，bytes.buffer底层也是一个[]byte切片。 strings.join strings.join也是基于strings.builder来实现的,并且可以自定义分隔符，在join方法内调用了b.Grow(n)方法，这个是进行初步的容量分配，而前面计算的n的长度就是我们要拼接的slice的长度，因为我们传入切片长度固定，所以提前进行容量分配可以减少内存分配，很高效。 🍌 什么是 rune 类型 --查看答案-- Unicode在 Go 语言中称之为 rune，是 int32 类型的别名。 🍍 如何判断 map 中是否包含某个 key ？ var sample map[int]int if _, ok := sample[10]; ok { } else { } 🥭 Go 支持默认参数或可选参数吗？ --查看答案-- 不支持。但是可以利用结构体参数，或者…传入参数切片数组。 // 这个函数可以传入任意数量的整型参数 func sum(nums ...int) { total := 0 for _, num := range nums { total += num } fmt.Println(total) } 🍎 defer 的执行顺序 --查看答案-- defer执行顺序和调用顺序相反，类似于栈后进先出(LIFO)。 func test() int { i := 0 defer func() { fmt.Println(\"defer1\") }() defer func() { i += 1 fmt.Println(\"defer2\") }() return i } func main() { fmt.Println(\"return\", test()) } // defer2 // defer1 // return 0 func test() (i int) { i = 0 defer func() { i += 1 fmt.Println(\"defer2\") }() return i } func main() { fmt.Println(\"return\", test()) } // defer2 // return 1 🍏 如何获取一个结构体的所有tag？ 展开查看 利用反射 import reflect type Author struct { Name int `json:Name` Publications []string `json:Publication,omitempty` } func main() { t := reflect.TypeOf(Author{}) for i := 0; i \u003c t.NumField(); i++ { name := t.Field(i).Name s, _ := t.FieldByName(name) fmt.Println(name, s.Tag) } } 🍐 如何判断 2 个字符串切片（slice) 是相等的？ --查看答案-- reflect.DeepEqual() ， 但反射非常影响性能。 🍑 结构体打印时，%v 和 %+v 的区别 展开查看 %v输出结构体各成员的值； %+v输出结构体各成员的名称和值； %#v输出结构体名称和结构体各成员的名称和值 🍒 Go 语言中如何表示枚举值(enums)？ const ( B = 1 \u003c\u003c (10 * iota) KiB MiB GiB TiB PiB EiB ) 🍓 空 struct{} 的用途 --查看答案-- 用map模拟一个set，那么就要把值置为struct{}，struct{}本身不占任何空间，可以避免任何多余的内存分配。 type Set map[string]struct{} func main() { set := make(Set) for _, item := range []string{\"A\", \"A\", \"B\", \"C\"} { set[item] = struct{}{} } fmt.Println(len(set)) // 3 if _, ok := set[\"A\"]; ok { fmt.Println(\"A exists\") // A exists } } 🥝 init() 函数是什么时候执行的？ --查看答案-- 在main函数之前执行。 展开查看详情 init()函数是go初始化的一部分，由runtime初始化每个导入的包，初始化不是按照从上到下的导入顺序，而是按照解析的依赖关系，没有依赖的包最先初始化。 每个包首先初始化包作用域的常量和变量（常量优先于变量），然后执行包的init()函数。同一个包，甚至是同一个源文件可以有多个init()函数。init()函数没有入参和返回值，不能被其他函数调用，同一个包内多个init()函数的执行顺序不作保证。 执行顺序：import –\u003e const –\u003e var –\u003einit()–\u003emain() 一个文件可以有多个init()函数！ 🍅 如何知道一个对象是分配在栈上还是堆上？ --查看答案-- Go和C++不同，Go局部变量会进行逃逸分析。如果变量离开作用域后没有被引用，则优先分配到栈上，否则分配到堆上。 🥥 2个nil 可能不相等吗？ --查看答案-- 可能不等。interface在运行时绑定值，只有值为nil接口值才为nil，但是与指针的nil不相等。 🫐 简述 Go 语言GC(垃圾回收)的工作原理 --查看答案-- 垃圾回收机制是Go一大特(nan)色(dian)。Go1.3采用标记清除法， Go1.5采用三色标记法，Go1.8采用三色标记法+混合写屏障。 🫒 函数返回局部变量的指针是否安全？ --查看答案-- 这一点和C++不同，在Go里面返回局部变量的指针是安全的。因为Go会进行逃逸分析，如果发现局部变量的作用域超过该函数则会把指针分配到堆区，避免内存泄漏。 🥑 非接口的任意类型 T() 都能够调用 *T 的方法吗？反过来呢？ --查看答案-- 一个T类型的值可以调用T类型声明的方法，当且仅当T是可寻址的。反之：T 可以调用T()的方法，因为指针可以解引用。 🍆 go slice是怎么扩容的？ 展开查看 Go \u003c= 1.17 如果当前容量小于1024，则判断所需容量是否大于原来容量2倍，如果大于，当前容量加上所需容量；否则当前容量乘2。 如果当前容量大于1024，则每次按照1.25倍速度递增容量，也就是每次加上cap/4。 Go1.18之后，引入了新的扩容规则：浅谈 Go 1.18.1的切片扩容机制 🥔 无缓冲的 channel 和有缓冲的 channel 的区别？ 展开查看 对于无缓冲区channel： 发送的数据如果没有被接收方接收，那么发送方阻塞；如果一直接收不到发送方的数据，接收方阻塞； 有缓冲的channel： 发送方在缓冲区满的时候阻塞，接收方不阻塞；接收方在缓冲区为空的时候阻塞，发送方不阻塞。 🥕 为什么有协程泄露(Goroutine Leak)？ 展开查看 协程泄漏是指协","date":"2022-10-13","objectID":"/go%E8%AF%AD%E8%A8%80%E9%9D%A2%E8%AF%95%E9%A2%98/:0:0","tags":["zhihu","interview","Golang"],"title":"【摘抄】Go常见面试题【由浅入深】2022版","uri":"/go%E8%AF%AD%E8%A8%80%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["English"],"content":"长荣海运年终奖发40个月薪、国际大事学习笔记","date":"2022-10-11","objectID":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/","tags":["Bilibili","notes","morning-english"],"title":"【英语晨读】长荣海运年终奖发40个月薪、国际大事","uri":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/"},{"categories":["English"],"content":"阅读原文 【视频】【英文晨读15分钟】一个人alone学英语（2022年版 | 持续更新） ","date":"2022-10-11","objectID":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/:1:0","tags":["Bilibili","notes","morning-english"],"title":"【英语晨读】长荣海运年终奖发40个月薪、国际大事","uri":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/"},{"categories":["English"],"content":"1.长荣海运年终奖发 40 个月薪、国际大事 Evergreen reportedly doles out generous year-end bonuses for employees 据报道，长荣为员工发放丰厚的年终奖 Evergreen Marine(美[məˈrin]英[məˈriːn]) Corp, the largest container shipping company in Taiwan, reportedly doled out year-end bonuses of as much as 40 months’ wages to some of its employees on Thursday. 据报道，台湾最大的货柜运输公司-长荣海运集团，在周四为部分员工发放了 高达40个月的薪水的年终奖。 According to local media reports, some Evergreen Marine employees were rumored sb be rumored: 据传某人… e.g. The girl was unhappy for being rumored to have a boyfriend. to have each received some NT$2 million(US$72,312) in bonus. 据当地媒体报道，据传长荣海运的一些员工每人获得了约200万新台币的奖金。 A couple who were both entry-level supervisors at Evergreen told China Times Thursday that they received a combined NT$5 million year-end bonus. The two said they earn a base salary of earn a base salary of:底薪是… e.g I earn a base salary of 1800 yuan in our company. NT60,000 and that they have been working at the company for over 10 years. 一对同为长荣的入门级主管夫妇周四告诉中国时报，他们加起来共获得了5百万新台币的年终奖。两人称他们底薪6W新台币并且已在公司工作超过10年。 The shipping giant, however, declined to confirm the number of months except to except to: 只是… e.g. They do nothing except to say everything will be fine. say that employees each got different amounts and were compensated accordingly as the bonus was based on perfromance. 然而这家海运巨头拒绝公开奖金月数，只说员工每个人都得到不同的金额并且得到相应的报酬，因为奖金是基于绩效的。 1.1巩固练习 ✨ 按照描述写出相应的单词： A regular amount of money that you earn,usually every month,for work or services. --查看答案-- wage connected with the sea and creatures and plants that live there. --查看答案-- marine an extra of money that is added to your payment, especially to sb’s wages as reward. --查看答案-- bonus to pay sb money because they have suffered some damage,loss,injured, etc. --查看答案-- compensate 🎀 请翻译以下内容 今年，他们公司给他们部门每个人发放了1000块奖金。 This year, their company doled out 1000 bonus for everyone in their department. 这个月的花费超出预算整整300块。 The expenditure in this month exceeded the budget as much as 300 yuan. 据说这个新来的实习生是经理的亲戚。 The new intern was rumored to a relative of the manager. 他购买了一张入门级别的显卡。 He bought an entry-level Graphics card. 新入职的同事的底薪统一为3000块。 The base salary of every newly employed is always 3000 yuan. 这家游戏的运营拒绝透漏新角色的任何信息。 The operation department of this game declined to comfirm any information about the new character. 完成任务后，他获得了相应的报酬。 He got compensated accordingly after the task was done. ","date":"2022-10-11","objectID":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/:1:1","tags":["Bilibili","notes","morning-english"],"title":"【英语晨读】长荣海运年终奖发40个月薪、国际大事","uri":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/"},{"categories":["English"],"content":"2. 南非议会被烧毁（South Africa’s parliament burns） A large fire damaged much of the Houses of Parliament on Sunday. 周日，一场大火烧毁了议会大厦的大部分地方。 Officials warned that the damage to the historic(有历史意义的，historical：古老的) complex would be extensive. 官员警告说，历史性建筑群的损失无疑是广泛的。 Officials said the fire spread from an office space on the third of a building adjacent(英[əˈdʒeɪsnt] 美[əˈdʒeɪsnt] ) to the old National Assembly building. 官员说，大火从靠近旧国会大楼的一栋大楼三楼的一个办公空间蔓延开来的。 Cape Town’s Fire and rescue Service spokesman warned that the buildings themselves were at risk of collapse, given the intense heat of the fire. 开普敦的消防和救援服务发言人警告说，鉴于这个火势猛烈，建筑本身存在倒塌的风险 2.1 巩固练习 ✨ 按照描述写出相应的单词： a group of buildings of a similar type together in one place. --查看答案-- complex 🎀 请翻译以下内容 这院子的大部分的地方都是闲置的。 Much of the yard is unoccupied. 不佩戴口罩出门存在感染新型冠状病毒的风险。 Go outside without wearing a mask was at risk of contracting covid-19. 鉴于他的伤情，教练决定让他回家养伤。 Given his condition of injury, the coach decided to let him go home to recuperate. 由于火势凶猛，灭火行动一时难以开展。 Given the intense heat of fire, it is difficult to control the fire at the moment. ","date":"2022-10-11","objectID":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/:1:2","tags":["Bilibili","notes","morning-english"],"title":"【英语晨读】长荣海运年终奖发40个月薪、国际大事","uri":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/"},{"categories":["English"],"content":"3. 欧盟考虑一个非自由主义的领导人是否为同一阵线(E.U considers whether an illiberal leader belongs) Viktor Orban, Hungary’s prime minister, proudly refers to his country as refer to … as: 把…看作/称为… e.g. He refers to Jane as his grilfriend. “illiberal state.” Yet he has long been treated as just another leader by the Europe Union, which holds itself up as a model of human rights and the rule of law. 匈牙利总理Vitor Orban自豪地称他的国家是一个“非自由主义国家”。然而，长期以来，他被欧盟视为仅仅是另一个欧盟的领导人，欧盟则将自己视为人权和法治的典范。 But as Orban has continued to consolidate power and weaken his country’s democratic(英[ˌdeməˈkrætɪk]美[ˌdeməˈkrætɪk]) institutions, the bloc is trying to rein him in. Early this year, the European Court of Justice will issue a decision on whether the union has the authority to make its funds to memeber states conditional on conditional on: 以…为条件 e.g. His compromise is conditional on gaining a lot of money. meeting the bloc’s core values. Doing so may block Hungary from billions of euros block sb. from sths: 阻止某人获得某物 e.g. His aunt is trying to block him from a legacy of $500,00 . 但是，随着Orban继续巩固权力并削弱其他国家的民主机构，欧盟试图抑制他。今年年初，欧洲法院就欧盟是否有权以符合欧盟核心价值观为条件向成员国提供资金而做出裁决。这样做可能会阻止匈牙利获得数十亿的资金。 3.1 巩固练习 ✨ 按照描述写出相应的单词： to make a position of power or success so that it is more likely to continue. --查看答案-- consolidate 🎀 请翻译以下内容 他们以兄弟相称。 They refer each other as brother. 他常常把自己视为公司的接班人。 He offten hold himself up as a succesor of the company. 他试图抑制他弟弟的所作所为。 He is trying to rein his brother in what he did. 公司将开会就是否录用他做出表态。 The company will issue a decision on whether hiring him at a meetting. 他以这个庄园作为条件帮助她 His help to her is conditional on this manor. ","date":"2022-10-11","objectID":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/:1:3","tags":["Bilibili","notes","morning-english"],"title":"【英语晨读】长荣海运年终奖发40个月薪、国际大事","uri":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/"},{"categories":["English"],"content":"4. 菲律宾对未接种疫苗的人实行隔离-A lockdown for the unvaccinated in the Philippines The Philippines will bar all unvaccinated residents from leaving their homes, except for essential reassons, in Manila and the surrounding areas. The lockdown is in response to post-holiday spike in Covid-19 cases. 菲律宾将 禁止 bar sb. from sth.: 禁止某人做某事 e.g. Her monther bar her from leaving home. 马尼拉及周边地区未接种疫苗的剧名离开家门，除非有必要的原因。隔离是为了应对 放假后Covid-19病例的激增。 The lockdown is aimed at both lessening the country’s caseload and encouraging vaccinations. Health officials have suggested that vaccine complacency was behind the latest rise in infections. “Despite the availability of vaccines, there is number of individuals who adamantly opt not to be vacinated”, the Metropolitan Manila Development Authority said in a statment. 隔离的目的是减少该国的病例数和鼓励接种疫苗。卫生官员表示，最近感染率上升背后的原因是对疫苗政策过于自满。马尼拉市发展局在一份声明中说：“尽管有疫苗，仍然有一些人坚决选择不接种。 4.1 巩固练习 ✨ 按照描述写出相应的单词： a thin object with a sharp point,especially a pointed piece of metal,wood etc. --查看答案-- spike all the people that a doctor,social worker is responsible for at one time. --查看答案-- caseload a feeling of satisfaction with yourself or with a situation so that you do not think any change is necessary. --查看答案-- cmplacency 🎀 请翻译以下内容 明天的会议所有人都要参加，除非有重要的事情。 Everyone should attend the meeting tomorrow,except for essential reassons. 为了应对这次的比赛，我们做好了充足的准备。 We well prepared in response to this competition. 轻敌是这次失败的主要原因。 Underestimated the enemy is behind our failure at this thime. ","date":"2022-10-11","objectID":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/:1:4","tags":["Bilibili","notes","morning-english"],"title":"【英语晨读】长荣海运年终奖发40个月薪、国际大事","uri":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/"},{"categories":["English"],"content":"5. Omicron给印度带来了似曾相识的感觉-Omicron brings a sense of deja vu to India Just a few months ago, as government leaders vastly underestimated the dangers and publicly flouted official advice, the Delta variant ravaged India. Now, with the rise of Omicron, the mixed signals from the government and rapid spread through cities are fueling a sense of deja vu. 就在几个月前，由于政府领导人大大低估了危险性并公开蔑视官方建议，Delta变体肆虐了印度。现在，随着Omicron的兴起，来自政府的混杂信息和在城市中的快速传播正在助长一种似曾相识的感觉。 As the Omicron wave began last month, Prime Minister Narenra Modi urged the nation to be vigilant. Arvind Kejriwal, the chief minister of the Delhi region, introduced night curfews, shut down movie theaters and slashed capacity in restaurants and public transport. 随着Omicron浪潮在上个月开始，总理Modi敦促全国人民保持警惕。德里地区的首席部长Arind Kejriwal实行了宵禁，关闭了电影院并且削减了餐馆和公共运输的容纳人数。 5.1 巩固练习 ✨ 按照描述写出相应的单词： to think or guess that the amout,cost or size of sth is smaller than it really is. --查看答案-- underestimate to show that you have no respect for a law. --查看答案-- flout to damage sth. badly. --查看答案-- ravage very careful to notice any signs of danger or trouble. --查看答案-- vigilant a law which says that people must not go outside after a particular time at night until the morning. --查看答案-- curfew to make a long cut with a sharp object, especially in a violent way. --查看答案-- slash 🎀 请翻译以下内容 2019-2022 新型冠状病毒肆虐了全球。 Covid-19 ravaged all over the world in 2019-2022. 随着手机的兴起，电脑游戏的用户正在逐年减少。 With the rise of mobile, the users of computer game is lessening year by year. ","date":"2022-10-11","objectID":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/:1:5","tags":["Bilibili","notes","morning-english"],"title":"【英语晨读】长荣海运年终奖发40个月薪、国际大事","uri":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/"},{"categories":["English"],"content":"其他新闻精选 Politicans in Chile are calling for a pasuse in new mining contract for Lithium, which is in high demand for electric car batteries but is raising concerns over the social and environmental risks of minxing. 智利的政界人士呼吁暂停新的锂开采合约，锂对电车电池的需要量很大，但是人民对采矿的社会和环境风险感到担忧。 Britain’s prime minister, Boris Johnson, was rebuked by his ethics adviser over the costly refurbishment of his Downing Street apartment. 英国首相因其在唐宁街公寓的昂贵翻修而受到道德顾问的指责。 Pope Francis said that people who have pets instead of children are being selfish. “It takes away our humanity”, he said. Pop Francis 说养宠物而不养孩子的人是自私的，这种行为夺走了我们的人性。 6.1 巩固练习 ✨ 按照描述写出相应的单词： to speak severely to sb because they have done sth wrong. --查看答案-- rebuke 🎀 请翻译以下内容 他准备对院子进行一次翻新。 He is going to give a refurbishment to the yard. ","date":"2022-10-11","objectID":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/:1:6","tags":["Bilibili","notes","morning-english"],"title":"【英语晨读】长荣海运年终奖发40个月薪、国际大事","uri":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/"},{"categories":null,"content":"嗨，大家好 👋 很高兴认识大家！ ","date":"2019-08-02","objectID":"/about/:0:1","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"FixIt 主题的离线缓存页面","date":"0001-01-01","objectID":"/offline/","tags":null,"title":"","uri":"/offline/"},{"categories":null,"content":"FixIt 主题的友链模板 Demo","date":"0001-01-01","objectID":"/friends/","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":" 添加您的 FixIt 网站 您可以通过 创建 PR 将您的 FixIt 网站添加到此页面。（例如：#111）  网站失效、停止维护、不当内容都可能被取消链接！ ","date":"0001-01-01","objectID":"/friends/:0:0","tags":null,"title":"友情链接","uri":"/friends/"}]