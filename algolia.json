[{"categories":["English"],"content":"五月初，一些园子里，水仙花已经开放满在果树的周围。   It was early May. In some of the gardens the fruit trees were encircled with dense clusters of daffodils. 赤杨树已经长出了嫩绿的叶子。   The birches were already in pale green leaf. 每年这个时候万物复苏，多么美妙啊！   It was extraodinary how everything burst forth at this time of year! 天气回暖和所有的雪都融化了的时候，是什么驱使无数花草树木从荒芜的大地生长开来?   What made this great mass of green vegetation come welling up from the dead earth as soon as it got warm and the last traces of snow disapeared? 当Sophie打开花园的门时，她看了看信箱。   As Sophie opened her garden gate, she looked in the mailbox. 通常是一堆垃圾邮件和妈妈的大信封，堆放在厨房的桌子上她回到房间开始写作业。   There was usually a lot of junk mail and a few big envelopes for her mother,a pile to dump on the kitchen table before she went up to her room to start her homework. 偶尔也有一些银行寄给她爸爸的信，不过Sophie的爸爸不一般。   From time to time there would be a few letters from the bank for her father, but then he was not a normal father. Sophie的爸爸是一艘大油轮的船长，几乎一年都在外面。   Sophie’s father was the captain of a big oil tanker, and was away for most of the year. 有几个星期他在家，他会上下细心打点，为母女俩把房子整理得漂亮舒适。   During the few weeks at a time when he was at home, he would shuffle around the house making it nice and cozy fo Sophie and her mother. 但是当他出海后却显得离她们遥远无比。   But when he was at sea he could seem very distant. ","date":"2022-12-17","objectID":"/%E4%BC%8A%E7%94%B8%E5%9B%AD02/:0:0","tags":["每日英语听力","苏菲的世界"],"title":"【每日英语听力】伊甸园1-2","uri":"/%E4%BC%8A%E7%94%B8%E5%9B%AD02/"},{"categories":["English"],"content":"到某个点事物必然从无到有。   At some point something must have come from nothing. Sophie Amundsen在放学回家的路上。   Sophie Admundsen was on her way home from school. 有一段路她和Joanna一起走，她们聊着机器人。   She had walked the first part of the way with Joanna, they had been discussing robots. Joanna觉得人的脑袋就跟高级电脑差不多。   Joanna thought the human brain was like an advanced computer. Sophie不太同意-人当然比一个机器高级得多吧？   Sophie was not certain she agreed. Surely a person was more than a piece of hardware? 她们到了超市就分开了。   When they got to the supermarket they went their seperate ways. Sophie住在广阔的郊区，到学校的距离差不多是Joanna的两倍。   Sophie lived on the outskirts of a sprawling suburb and had almost tiwice as far to school as Joanna. 除了她自家的园子外没有其他房屋，这样使得她家就在世界的尽头似的。   There were no other houses beyond her garden, which made it seem as if her house lay at the end of the world. 前面就是森林了，她从拐角进入了Clover Close.   This was where the woods began. She turned the corner into Clover Close. 路的尽头是一个急转弯，被称为Captain’s Bend.   At the end of the road there was a sharp bend, known as Captain’s Bend. 人们很少走这条路，除非是周末。   People seldom went that way except on the weekend. ","date":"2022-12-08","objectID":"/%E4%BC%8A%E7%94%B8%E5%9B%AD01/:0:0","tags":["每日英语听力","苏菲的世界"],"title":"【每日英语听力】伊甸园1-1","uri":"/%E4%BC%8A%E7%94%B8%E5%9B%AD01/"},{"categories":["English"],"content":" That feeling   of panic after someone   honks at you. I   gotta let him know. I   could have missed that light. The   twist at the end tho🤣🤣🤣👌. I’ll just   hang out by myself. plus overtime, if we   go over 8 hours. I   would have done it for the experience. The tag’s still   on there I’m   for real. So that’s how it’s   gone be. You all wanna play. Do you wanna go to war? we   could go to war. You’ll feel my   wrath Those 5 minutes   turn into 1h when you open youtube shorts. help me out   there She don’t like the restaunt, me   neither . DO you mind if I use your computer?   No , I don’t mind. Why   doesn’t he come and talk to me himself. Trump   becoming more and more revelant, beacuse sleepy Joe   got the throne. I live with … I not get personal with me. I don’t finght fair. ","date":"2022-11-28","objectID":"/%E7%A2%8E%E7%89%87%E8%8B%B1%E8%AF%AD%E8%AE%B0%E5%BD%9502/:0:0","tags":["碎片英语"],"title":"【碎片英语】碎片英语收集02","uri":"/%E7%A2%8E%E7%89%87%E8%8B%B1%E8%AF%AD%E8%AE%B0%E5%BD%9502/"},{"categories":["English"],"content":" English is my   native language   yet even I can’t   keep up with the txt language sometimes. I’v   got news for you. this series   escalated quickly. When she said “Bitch” who all thought of the Vmin meme??   Definitely me😂😂 A classmate   tried to say she had a cough but pronounced it   as “cock\"😂 YouTube gave me a   strike for showing Joe Biden’s reaction after eating spicy pizza   claiming it is cyberbulling and harassment. The   right way to pronounce is … When she said “well I can’t swim either” I immediately   starting laughing my ass off. You’re making me   feel like I’m having a   stroke . At what age did you   lose your virginity? The fact she   was going   that fast and he   managed to catch her and keep her feet is amaziming!! She must   have been going at least 60 mph. Moment of silence for the people who thought that the guy meant it. No,he’s not here   right now . We’ve been dating for   the last 8 months. Pls someone, make a song   out of this. Love the way he make his toune   sound . What’s the first thing you   think of when I say him. You finished all my water   the other day . You   got me messed up I’m gonna take your   life savings - if you don’t mind. The way he slapped the money into the case   got me laughing. I never knew that Latin American monthers and Asian monters   where so similar XD I’m finished. I   even can see his emotions through teddy bear face🥺🤣🤣 I can see the sadness   on his face. This robot works as a waiter at a restaurant and is   hilarious . Don’t   block my way please, I have to work,   otherwise , I’ll be fired. You can   never win me. Did you   get my text? I sent you a text. Ah… I don’t think so.. I actually fire a private investigator to follow you   around . I just don't feel like it, OK? I didn’t   get your message. Your text didn’t come   through . He sacrificed every   last bit of courage   left in his body for this moment. Uh,this is super   random .. But she’s   off by 2 eggs. Do you have   any eggs   by chance . So what do we mean   by strong. It can not change   over time. You can’t   put a string in it. Go does have features that allow you to   get around its type system. They have an easier time as possible   ramping up onto the go language. Keep compile’s time   down .   be deemed to be ： 被认为。。。 As a   matter of fact, you did a great job that day. If we come   over the project link. He’s been   cutting class. You called the police   on your mom, because she   disciplined you for   ditching class? Hit him again   had me crying. ","date":"2022-11-19","objectID":"/%E7%A2%8E%E7%89%87%E8%8B%B1%E8%AF%AD%E8%AE%B0%E5%BD%9501/:0:0","tags":["碎片英语"],"title":"【碎片英语】碎片英语收集01","uri":"/%E7%A2%8E%E7%89%87%E8%8B%B1%E8%AF%AD%E8%AE%B0%E5%BD%9501/"},{"categories":["English"],"content":" 引用 以下内容来源于: https://www.youtube.com/watch?v=_sqxYGubJTc 🍒 原文内容 If you have big dreams   for learning a new language but have   very limited time for studying and often find   that your job or busy schedule   gets in the way of achieving those dreams then this is the video for you. Learning a new language   takes constant time and effort and it can be really easy to feel overwhelmed or like there's no time to   squeeze it   in . Today I’m going to talk about how I can most effectly self-study a new language around a busy lifestyle. If you're new here my name is lzzy and I’m a Cambridge graduate and a doctor working in London and on the side I learn Mandarin Chinese in any freee time I can get. Making space for language learning is something that I have spend a lot of time and energy figuring out how to do. For more than a year I’v been struggling in studying Mandarin Chinese while also being a full-time medical student   at Cambridge and now a doctor working full-time in London. Whether you’re working/stduying or busy with anything else at all, in this video I’ll   break down the main steps that I use in order to schedule my language learning to continue to make progress with my Mandarin Chinese. In this video we talk about understanding your learner   profile ,finding   magnifying and protecting any time you have for stduying a language   around your busy schedule, and finally we’ll talk about study efficiency and how we can   maximize this as we're   short on time already so we've really got to make the most of any minutes that we can get. The first step is to understand your personal learner profile. So this essentially means (that)   understandding how you learn best. We’re all defferent and we all learn in defferent ways. The best way to figure this out is by trying a few different learning styles out and seeing what feels best to you. This ties is very   in closely with energy management. Monitoring when you feel the most energy in a day and what kinds of study sessions suit you. So here I would think about whether you’re morning person or   more of a night owl, also think about the duration of study sessions that were best to you. For me generally I prefer to study in shorter   bursts of half an hour to maybe an hour. But some people like to sit down for maybe a few hours of really deep focus. Also   bear in mind what helps give you energy and give you motivation to actully study a language. A lot of this is about discipline rather than motivation, but at the end of the day is way more enjoyable if we're having fun with our learning journey. So figuring out learning strategies that you actually enjoy and suit you is going to make everything so much smoother. This   includes having some fun options as part of your language learning   portfolio . So let’s say you get home from work and your're feeling absolutely   knackered instead of just completely canceling your study session that you'd scheduled. You can take a slightly more Middle Ground approach understand and recognize that you're feeling tired but still chose to do something that is going to help your language learning   overall ,such as watching a movie in your target language. The second thing is to honestly evaluate your schedule and then   block out time for your studying. This means looking for any time gaps in your schedule and being a very   realistic about what you can actually achieve. I personally use Google calendar for scheduling pretty much erverything in my life. So whatever kind of calendar scheduling you use. Scheduling your language learning time ahead of time and make sure you protect it. It’s easy to just cancle your language learning slot if you want to meet a friend for coffee or you're just feeling a little bit tire. But remember that this is   precious time that you want to dedicate to your language goals or dreams. Don’t let yourself down. I do this on a week by week basis, so every single Sunday I will sit down with my calendar and block o","date":"2022-11-18","objectID":"/%E9%9A%8F%E7%AC%941/:0:0","tags":["英语随笔"],"title":"【英语随笔】How to Make Time for Language Learning with a Full-Time Job","uri":"/%E9%9A%8F%E7%AC%941/"},{"categories":["English"],"content":" 引用 本文内容来源于: https://dict.eudic.net/webting/videoplay/1135c5ac-54f5-11ed-80dd-00505686c5e6 ","date":"2022-11-01","objectID":"/%E4%B8%87%E5%9C%A3%E8%8A%82%E7%9A%84%E5%8E%86%E5%8F%B2/:0:0","tags":["每日英语听力","万圣节"],"title":"【每日英语听力】万圣节的历史 The History Of Halloween","uri":"/%E4%B8%87%E5%9C%A3%E8%8A%82%E7%9A%84%E5%8E%86%E5%8F%B2/"},{"categories":["English"],"content":"🍎 原文填空 Every year, millions of people around the country   spill into streets, dressed as 一般过去时 用一般过去时描述当时发生的动作 fairies, goblins, characters from their favorite   movie franchise , and everything in between. Partying and making   mischief . But   outside of a good time , how many know why they do it? Today, Halloween is a billion-dollar industry. But exactly how did it get there? While today Halloween is   synonymous with commercialism, it wasn’t always that way. The word Halloween comes from the words hallow, meaning Holy person, and een, deriving as a contraction of eve. And All Hallows’ Eve finds its origins all the way back in the time of the ancient Celtic pagans with the holiday of Samhain, a three-day fire festival that essentially celebrated death and rebirth. The Celts, who lived in what is now Ireland, Scotland, the UK, and parts of Northern Europe,   based their calendar   on the wheel of a year. Essentially divided into two halves, the light and the dark. When one gave way to the other, this transition was marked by a fire festival. The word Samhain translates into modern Irish to summer’s end. Samhain celebrated the dead. And particularly, the celebratory feast   paid homage to loved ones who had passed away recently. Essentially as an invitation for their spirits to rejoin the living. Many of Samhain’s original   rituals have been lost, but what we do know of their holiday traditions from Celtic,   folklore and ancient Roman historians is that they were intended to connect them to spirits. Including costumes, Most likely animal are first to help them hide from the unfriendly ones, feasting and making lanterns from hollowed-out   gourds . Seemingly   the birth of the modern pumpkin jack-o-lantern. Sacrifices generally of crops or animals were made during this time as an offering to the spirits. It was popular for tricks or pranks to be played by humans and blamed on   mischievous spirits. As a result of the Roman invasion with most of the Celtic land being conquered by Rome in 43 CE, the spread of   Christianity and   Catholicism would force pagan Celtic traditions to evolve or be completely   repressed . In part, many Celtic traditions and popular pagan practices   were reframed to fit within a Christian   narrative as a way of converting people with greater comfort and ease. Samhain   would evolve into All Saints Day, which is also referred to as All Hallows Day. And was intended to be a day to celebrate the Christian saints and   martyrs . Essentially,   instead of honoring pagan gods and mischievous spirits, they now celebrated Christian figures. While the sacrifices were replaced by food offerings to the poor, the tricks and pranks continued. But instead, they were now   attributed to the spirits of the saints. Halloween evolved as a more   secular version of All Hallows’ Eve, and eventually it   would become more popular and common practice than All Saints Day. While Halloween has its origins in the British Isles, there’s a great   disparity in its popularity in former British colonies. The   Puritans who came to colonize America were   Protestant and did not celebrate holidays of the Catholic church, as they were believed to lead to idolatry. In the early days of the American colonies, celebrations of Halloweens were mostly forbidden as they were deemed top pagan or too Catholic by the Protestant colonizers. Though elements of it began to   incorporate into secular harvest-related events in the 1800s. The mid-19th century saw   a large influx of immigrants entering the country, especially Irish immigrants who were greatly impacted by the potato   famine . With these people came Halloween customs   out of which one of America’s favorite holidays was formed. In keeping with the mischief, children would dress in costumes and be given money or fruit for artistic offerings like poetry, songs, or even jokes instead of prayers. By the late 19th century, children were playing seemingly   innocuous pranks on their s","date":"2022-11-01","objectID":"/%E4%B8%87%E5%9C%A3%E8%8A%82%E7%9A%84%E5%8E%86%E5%8F%B2/:0:1","tags":["每日英语听力","万圣节"],"title":"【每日英语听力】万圣节的历史 The History Of Halloween","uri":"/%E4%B8%87%E5%9C%A3%E8%8A%82%E7%9A%84%E5%8E%86%E5%8F%B2/"},{"categories":["English"],"content":"🍉 重点词汇/短语 spill into   涌进 movie franchise   电影系列 mischief   恶作剧 outside of a good time   除了玩乐之外 synonymous with sth .   ..的代名词 feast   盛宴/祭礼 paid homage to…   向…致敬/悼念 ritual   仪式/礼节/老规矩 folklore   民间习俗 gourd   葫芦 prank   恶作剧 blame on   主要归咎于… repress   压制 narrative   叙述(的) sth. as a way of   某物是…的一种方式 refer to   适用/涉及 Chrinstianity   基督教 Catholicism   天主教 martyrs   殉道者 Essentially   本质上说 be attribue to   延续…的精神 secular   世俗的 disparity   差距 Puritans   清教徒 Protestant   新教徒 deeped top pagan   极端的异教徒 incorporate   合并/融入 a large influx of immigrants   大批移民涌入 famine   饥荒 innocuous   无害的 incentive   动机 dissuade…from…   劝阻… bandwagon   时尚/风靡的活动 responsible for the proliferation of Halloween as…   推动万圣节作为…的普及 running Halloween specials   播放万圣节特辑 far beyond   远超 for more than a month out of the year   每年有一个多月的时间时间里 out of nowhere   突然冒出 spooky   幽灵般的 gruesome goblin   恐怖的妖怪 has stood the test of time   经受住了时间的考验 ","date":"2022-11-01","objectID":"/%E4%B8%87%E5%9C%A3%E8%8A%82%E7%9A%84%E5%8E%86%E5%8F%B2/:0:2","tags":["每日英语听力","万圣节"],"title":"【每日英语听力】万圣节的历史 The History Of Halloween","uri":"/%E4%B8%87%E5%9C%A3%E8%8A%82%E7%9A%84%E5%8E%86%E5%8F%B2/"},{"categories":["Chinese"],"content":" 引用 本文内容来源于: https://dict.eudic.net/webting/videoplay/1135c5ac-54f5-11ed-80dd-00505686c5e6 ","date":"2022-10-24","objectID":"/new/:0:0","tags":["大学语文"],"title":"New","uri":"/new/"},{"categories":["English"],"content":" 引用 本文内容来源于: https://max.book118.com/html/2021/1111/7133063160004040.shtm 🍓 Present the grammatical units that form a hierarchical order. Hierarchy of grammatical units: 展开查看详情 A text consists of one or more sentences. A sentence consists of one or more clauses. A clause consists of one or more phrases. A phrase consits of one or more words. A word consists of one or more morphemes 🍉 Define morpheme, free morpheme, bound morpheme,morph and allomorph what is morpheme --查看答案-- A morpheme is the minimal distinctive grammatical unit, and is the lowest unit in grammatical hierarchy. Morphemes are actually abstract elements of analysis. What occurs is an othographic form in writing termed ‘morph’ which realizes the morpheme. What are free morpheme and bound morpheme? 展开查看详情 A free morpheme is a morpheme that has a meaning of its own and can be used independenctly. A free morpheme can be a simple word or a root of a derivative. A bound morpheme is morpheme that hasn’t a meaning of its own and can’t be used independenctly. A bound morpheme often possess additional or grammatical features. Generally speaking, free morpheme often carry the meaning and bound morpheme often show grammatical features. What are morph and allomorph 展开查看详情 A morph is the realization a an othographic form in writing and a phonetic form in speaking of a morpheme. A allomorph is the indistinctive variant of a morpheme. 🍑 Distinguish root, stem and base as morphological term. 展开查看详情 A root is that part of a word that remains when all affixes haven removed and it is not further analyzable in morphological term. A stem has to do with inflectional features and is the part that remains when all the inflectional affixes have been removed. A base is any form to which affixes of any kind can be added. 🥝 What are the semantic and functional defferences between a prefix and suffix. 展开查看详情 The vast majority of prefixes do not chage the original word class, and they tend to be semantically oriented. It adds new meaning to a base. Suffixes are basically class-changing morphemes, they do not tend to be semantically changed. 🍅 Name at least five methods of word-formation and cite examples for each. 展开查看详情 Affixation-a word is fromed by attaching a lesser morpheme, an affix to a base element. Composition-a word is formed by compounding more than one base and this word functions both grammatically and semantically as a single word. Convertion-the derivational process whereby an item is adapted or converted to a new word without the addition of affix. Blending-a word formed from parts of two or more other words. Backformation(逆生法)-formed from verbs. Shortening-is a process whereby part of a word is clipped so that the origainal word is shortended to a smaller word. Acronym(首字母缩略法)-a word coined by putting together the initial letters of a group of words. 🍆 Cite examples for the simple verb phrase, the complex verb phrase,the finite verb phrase and the non-finite verb phrase. 展开查看详情 simple verb phrase: modifier+main verb; I full appreciate your work。 complex verb phrase: auxiliary + main verb; Even experts can make mistake. finite verb phrase: She likes black coffee.(finite verb bears with the tense maker and in some cases keeps in concord with the subject.) non-finite verb phrase: She hates being called by the wrong name. 🥕 What are the seven clauses patterns? 展开查看详情 SV, SVC,SVO,SVA,SVOO,SVOC,SVOA S=subject, V=verb, O=object, A=adverbial 🌽 Define the finte clauses and the non-finite clauses. 展开查看详情 finite clauses have subjects and finite verbs as predicates. non-finite clauses leave subjects unsai and verbs in non-finite forms. 🌶️ Define the simple sentence,the compound sentence and the complex sentence. 展开查看详情 simple: one-clause sentence compound: more than one clause,which are related to one another by coordination. complex: more than one clause, which are related to one another by subordination. 🍄 Why do we need to go beyond the sentence and stduy text 展开查看详情 Because to expres","date":"2022-10-21","objectID":"/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95/:0:0","tags":["英语语法"],"title":"【英语语法】00831现代英语语法-复习资料","uri":"/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95/"},{"categories":["Programming"],"content":" 引用 本文内容来自：Go语言圣经（中文版） 环境配置： 系统：Windows11 编辑器：vscode 注意 本文假设你已经安装了Go并配置好相关环境，如果你还没有安装Go，请前往Go官方网站进行下载安装 🌱 Goroutines 在Go语言中，每一个并发的执行单元叫作一个goroutine。 package main import ( \"fmt\" \"time\" ) func main() { go spinner(100 * time.Millisecond) const n = 45 fibN := fib(n) // slow fmt.Printf(\"\\rFibonacci(%d) = %d\\n\", n, fibN) } func spinner(delay time.Duration) { for { for _, r := range `-\\|/` { fmt.Printf(\"\\r%c\", r) time.Sleep(delay) } } } func fib(x int) int { if x \u003c 2 { return x } return fib(x-1) + fib(x-2) } ","date":"2022-10-19","objectID":"/goroutines%E5%92%8Cchannels/:0:0","tags":["Go语言圣经"],"title":"【Go语言圣经】Goroutines和Channels","uri":"/goroutines%E5%92%8Cchannels/"},{"categories":["Programming"],"content":" 引用 本文内容来自：Go语言圣经（中文版） 环境配置： 系统：Windows11 编辑器：vscode 注意 本文假设你已经安装了Go并配置好相关环境，如果你还没有安装Go，请前往Go官方网站进行下载安装 💐 接口约定 接口类型是一种抽象的类型。它不会暴露出它所代表的对象的内部值的结构和这个对象支持的基础操作的集合；它们只会表现出它们自己的方法。 🌹 接口类型 接口类型具体描述了一系列方法的集合，一个实现了这些方法的具体类型是这个接口类型的实例。 io.Writer类型是用得最广泛的接口之一，因为它提供了所有类型的写入bytes的抽象，包括文件类型，内存缓冲区，网络链接，HTTP客户端，压缩工具，哈希等等。 🌺 sort.Interface接口 package main import ( \"fmt\" \"os\" \"sort\" \"text/tabwriter\" \"time\" ) type Track struct { Title string Artist string Album string Year int Length time.Duration } var tracks = []*Track{ {\"Go\", \"Delilah\", \"From the Roots Up\", 2012, length(\"3m38s\")}, {\"Go\", \"Moby\", \"Moby\", 1992, length(\"3m37s\")}, {\"Go Ahead\", \"Alicia Keys\", \"As I Am\", 2007, length(\"4m36s\")}, {\"Ready 2 Go\", \"Martin Solveig\", \"Smash\", 2011, length(\"4m24s\")}, } func length(s string) time.Duration { d, err := time.ParseDuration(s) if err != nil { panic(s) } return d } func printTracks(tracks []*Track) { const format = \"%v\\t%v\\t%v\\t%v\\t%v\\t\\n\" tw := new(tabwriter.Writer).Init(os.Stdout, 0, 8, 2, ' ', 0) fmt.Fprintf(tw, format, \"Title\", \"Artist\", \"Album\", \"Year\", \"Length\") fmt.Fprintf(tw, format, \"-----\", \"------\", \"-----\", \"----\", \"------\") for _, t := range tracks { fmt.Fprintf(tw, format, t.Title, t.Artist, t.Album, t.Year, t.Length) } tw.Flush() // calculate column widths and print table } type byArtist []*Track func (x byArtist) Len() int { return len(x) } func (x byArtist) Less(i, j int) bool { return x[i].Artist \u003c x[j].Artist } func (x byArtist) Swap(i, j int) { x[i], x[j] = x[j], x[i] } func main(){ sort.Sort(byArtist(tracks)) printTracks(tracks) } ","date":"2022-10-19","objectID":"/%E6%8E%A5%E5%8F%A3/:0:0","tags":["Go语言圣经"],"title":"【Go语言圣经】接口","uri":"/%E6%8E%A5%E5%8F%A3/"},{"categories":["Programming"],"content":" 引用 本文内容来自：Go语言圣经（中文版） 环境配置： 系统：Windows11 编辑器：vscode 注意 本文假设你已经安装了Go并配置好相关环境，如果你还没有安装Go，请前往Go官方网站进行下载安装 💐 方法声明 在函数声明时，在其名字之前放上一个变量，即是一个方法。 第一个Distance的调用实际上用的是包级别的函数geometry.Distance，而第二个则是使用刚刚声明的Point，调用的是Point类下声明的Point.Distance方法。 这种p.Distance的表达式叫做选择器，因为他会选择合适的对应p这个对象的Distance方法来执行。 package geometry import \"math\" type Point struct{ X, Y float64 } // traditional function func Distance(p, q Point) float64 { return math.Hypot(q.X-p.X, q.Y-p.Y) } // same thing, but as a method of the Point type func (p Point) Distance(q Point) float64 { return math.Hypot(q.X-p.X, q.Y-p.Y) } p := Point{1, 2} q := Point{4, 6} fmt.Println(Distance(p, q)) // \"5\", function call fmt.Println(p.Distance(q)) // \"5\", method call 🌸 基于指针对象的方法 当调用一个函数时，会对其每一个参数值进行拷贝。避免进行这种默认的拷贝，这种情况下我们就需要用到指针 func (p *Point) ScaleBy(factor float64) { p.X *= factor p.Y *= factor } 想要调用指针类型方法(*Point).ScaleBy，只要提供一个Point类型的指针即可，像下面这样。 r := \u0026Point{1, 2} r.ScaleBy(2) fmt.Println(*r) // \"{2, 4}\" 如果接收器p是一个Point类型的变量，并且其方法需要一个Point指针作为接收器，我们可以用下面这种简短的写法： p.ScaleBy(2) 💮 封装 Go语言只有一种控制可见性的手段：大写首字母的标识符会从定义它们的包中被导出，小写字母的则不会。这种限制包内成员的方式同样适用于struct或者一个类型的方法。因而如果我们想要封装一个对象，我们必须将其定义为一个struct。 提前预留一部分空间，来避免反复的内存分配。 type Buffer struct { buf []byte initial [64]byte /* ... */ } // Grow expands the buffer's capacity, if necessary, // to guarantee space for another n bytes. [...] func (b *Buffer) Grow(n int) { if b.buf == nil { b.buf = b.initial[:0] // use preallocated space initially } if len(b.buf)+n \u003e cap(b.buf) { buf := make([]byte, b.Len(), 2*cap(b.buf) + n) copy(buf, b.buf) b.buf = buf } } ","date":"2022-10-19","objectID":"/%E6%96%B9%E6%B3%95/:0:0","tags":["Go语言圣经"],"title":"【Go 语言圣经】方法","uri":"/%E6%96%B9%E6%B3%95/"},{"categories":["Programming"],"content":" 引用 本文内容来自：Go语言圣经（中文版） 环境配置： 系统：Windows11 编辑器：vscode 注意 本文假设你已经安装了Go并配置好相关环境，如果你还没有安装Go，请前往Go官方网站进行下载安装 🌶️ 函数声明 函数声明包括函数名、形式参数列表、返回值列表（可省略）以及函数体。 func name(parameter-list) (result-list) { body } 形式参数列表描述了函数的参数名以及参数类型。这些参数作为局部变量，其值由参数调用者提供。 🥕 递归 使用递归处理HTML文件 新建项目文件夹chapter05并用vscode打开 在根目录chapter05下新建文件fetch 在fetch下新建文件main.go: package main import ( \"fmt\" \"io\" \"net/http\" \"os\" \"path\" ) //!+ // Fetch downloads the URL and returns the // name and length of the local file. func fetch(url string) (filename string, n int64, err error) { resp, err := http.Get(url) if err != nil { return \"\", 0, err } defer resp.Body.Close() local := path.Base(resp.Request.URL.Path) if local == \"/\" { local = \"index.html\" } f, err := os.Create(local) if err != nil { return \"\", 0, err } n, err = io.Copy(f, resp.Body) // Close file, but prefer error from Copy, if any. if closeErr := f.Close(); err == nil { err = closeErr } return local, n, err } //!- func main() { for _, url := range os.Args[1:] { local, n, err := fetch(url) if err != nil { fmt.Fprintf(os.Stderr, \"fetch %s: %v\\n\", url, err) continue } fmt.Fprintf(os.Stderr, \"%s =\u003e %s (%d bytes).\\n\", url, local, n) } } 在根目录chapter05下新建文件findlinks1 在findlinks1下新建文件main.go: // Findlinks1 prints the links in an HTML document read from standard input. package main import ( \"fmt\" \"os\" \"golang.org/x/net/html\" ) func main() { doc, err := html.Parse(os.Stdin) if err != nil { fmt.Fprintf(os.Stderr, \"findlinks1: %v\\n\", err) os.Exit(1) } for _, link := range visit(nil, doc) { fmt.Println(link) } } // visit appends to links each link found in n and returns the result. func visit(links []string, n *html.Node) []string { if n.Type == html.ElementNode \u0026\u0026 n.Data == \"a\" { for _, a := range n.Attr { if a.Key == \"href\" { links = append(links, a.Val) } } } for c := n.FirstChild; c != nil; c = c.NextSibling { links = visit(links, c) } return links } 在根目录chapter05下执行命令： go mod init chapter05 go mod tidy go build chapter05/fetch go build chapter05/findlinks1 ./fetch https://baidu.com | ./findlinks1 执行所有命令后在根目录chapter05下会生成文件index.html 🍄 在Go中，函数被看作第一类值（first-class values）：函数像其他值一样，拥有类型，可以被赋值给其他变量，传递给函数，从函数返回。 func square(n int) int { return n * n } func negative(n int) int { return -n } func product(m, n int) int { return m * n } f := square fmt.Println(f(3)) // \"9\" f = negative fmt.Println(f(3)) // \"-3\" fmt.Printf(\"%T\\n\", f) // \"func(int) int\" f = product // compile error: can't assign func(int, int) int to func(int) int 🍚 匿名函数 函数字面量的语法和函数声明相似，区别在于func关键字后没有函数名。函数值字面量是一种表达式，它的值被称为匿名函数（anonymous function）。 // squares返回一个匿名函数。 // 该匿名函数每次被调用时都会返回下一个数的平方。 func squares() func() int { var x int return func() int { x++ return x * x } } func main() { f := squares() fmt.Println(f()) // \"1\" fmt.Println(f()) // \"4\" fmt.Println(f()) // \"9\" fmt.Println(f()) // \"16\" } 🍠 可变参数 参数数量可变的函数称为可变参数函数。 func sum(vals ...int) int { total := 0 for _, val := range vals { total += val } return total } 🍜 Deferred函数 defer语句经常被用于处理成对的操作，如打开、关闭、连接、断开连接、加锁、释放锁。通过defer机制，不论函数逻辑多复杂，都能保证在任何执行路径下，资源被释放。释放资源的defer应该直接跟在请求资源的语句后。 package ioutil func ReadFile(filename string) ([]byte, error) { f, err := os.Open(filename) if err != nil { return nil, err } defer f.Close() return ReadAll(f) } 处理互斥锁（9.2章）: var mu sync.Mutex var m = make(map[string]int) func lookup(key string) int { mu.Lock() defer mu.Unlock() return m[key] } 🍣 Panic异常 Go的类型系统会在编译时捕获很多错误，但有些错误只能在运行时检查，如数组访问越界、空指针引用等。这些运行时错误会引起panic异常。 不是所有的panic异常都来自运行时，直接调用内置的panic函数也会引发panic异常；panic函数接受任何值作为参数。当某些不应该发生的场景发生时，我们就应该调用panic。 switch s := suit(drawCard()); s { case \"Spades\": // ... case \"Hearts\": // ... case \"Diamonds\": // ... case \"Clubs\": // ... default: panic(fmt.Sprintf(\"invalid suit %q\", s)) // Joker? } 🍡 Recover捕获异常 如果在deferred函数中调用了内置函数recover，并且定义该defer语句的函数发生了panic异常，recover会使程序从panic中恢复，并返回panic value。导致panic异常的函数不会继续运行，但能正常返回。在未发生panic时调用recover，recover会返回nil。 func Parse(input string) (s *Syntax, err error) { defer func() { if p := recover(); p != nil { err = fmt.Errorf(\"internal error: %v\", p) } }(","date":"2022-10-19","objectID":"/%E5%87%BD%E6%95%B0/:0:0","tags":["Go语言圣经"],"title":"【Go 语言圣经】函数","uri":"/%E5%87%BD%E6%95%B0/"},{"categories":["Programming"],"content":" 引用 本文内容来自：Go语言圣经（中文版） 环境配置： 系统：Windows11 编辑器：vscode 注意 本文假设你已经安装了Go并配置好相关环境，如果你还没有安装Go，请前往Go官方网站进行下载安装 🌶️ slice Slice（切片）代表变长的序列，序列中每个元素都有相同的类型。一个slice类型一般写作[]T，其中T代表slice中元素的类型；slice的语法和数组很像，只是没有固定长度而已 一个slice由三个部分构成：指针、长度和容量。 🥦 map 哈希表是一种巧妙并且实用的数据结构。它是一个无序的key/value对的集合，其中所有的key都是不同的，然后通过给定的key可以在常数时间复杂度内检索、更新或删除对应的value。 内置的make函数可以创建一个map： ages := make(map[string]int) // mapping from strings to ints 我们也可以用map字面值的语法创建map，同时还可以指定一些最初的key/value： ages := map[string]int{ \"alice\": 31, \"charlie\": 34, } Map的迭代顺序是不确定的，并且不同的哈希函数实现可能导致不同的遍历顺序。在实践中，遍历的顺序是随机的，每一次遍历的顺序都不相同。 import \"sort\" var names []string for name := range ages { names = append(names, name) } sort.Strings(names) for _, name := range names { fmt.Printf(\"%s\\t%d\\n\", name, ages[name]) } 和slice一样，map之间也不能进行相等比较；唯一的例外是和nil进行比较。要判断两个map是否包含相同的key和value，我们必须通过一个循环实现： func equal(x, y map[string]int) bool { if len(x) != len(y) { return false } for k, xv := range x { if yv, ok := y[k]; !ok || yv != xv { return false } } return true } ","date":"2022-10-18","objectID":"/%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/:0:0","tags":["Go语言圣经"],"title":"【Go 语言圣经】复合数据类型","uri":"/%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"categories":["Programming"],"content":"🍆 结构体 结构体是一种聚合的数据类型，是由零个或多个任意类型的值聚合成的实体。 type Employee struct { ID int Name, Address string DoB time.Time Position string Salary int ManagerID int } 结构体字面值 结构体值也可以用结构体字面值表示，结构体字面值可以指定每个成员的值。 type Point struct{ X, Y int } p := Point{1, 2} 如果考虑效率的话，较大的结构体通常会用指针的方式传入和返回 func Bonus(e *Employee, percent int) int { return e.Salary * percent / 100 } 结构体比较 如果结构体的全部成员都是可以比较的，那么结构体也是可以比较的，那样的话两个结构体将可以使用==或!=运算符进行比较。 type Point struct{ X, Y int } p := Point{1, 2} q := Point{2, 1} fmt.Println(p.X == q.X \u0026\u0026 p.Y == q.Y) // \"false\" fmt.Println(p == q) // \"false\" 结构体嵌入和匿名成员 type Point struct { X, Y int } type Circle struct { Center Point Radius int } type Wheel struct { Circle Circle Spokes int } 访问每个成员显得繁琐： var w Wheel w.Circle.Center.X = 8 w.Circle.Center.Y = 8 w.Circle.Radius = 5 w.Spokes = 20 Go语言有一个特性让我们只声明一个成员对应的数据类型而不指名成员的名字；这类成员就叫匿名成员。 type Circle struct { Point Radius int } type Wheel struct { Circle Spokes int } 得益于匿名嵌入的特性，我们可以直接访问叶子属性而不需要给出完整的路径： var w Wheel w.X = 8 // equivalent to w.Circle.Point.X = 8 w.Y = 8 // equivalent to w.Circle.Point.Y = 8 w.Radius = 5 // equivalent to w.Circle.Radius = 5 w.Spokes = 20 结构体字面值必须遵循形状类型声明时的结构，所以我们只能用下面的两种语法，它们彼此是等价的： w = Wheel{Circle{Point{8, 8}, 5}, 20} w = Wheel{ Circle: Circle{ Point: Point{X: 8, Y: 8}, Radius: 5, }, Spokes: 20, // NOTE: trailing comma necessary here (and at Radius) } fmt.Printf(\"%#v\\n\", w) // Output: // Wheel{Circle:Circle{Point:Point{X:8, Y:8}, Radius:5}, Spokes:20} w.X = 42 fmt.Printf(\"%#v\\n\", w) // Output: // Wheel{Circle:Circle{Point:Point{X:42, Y:8}, Radius:5}, Spokes:20} ","date":"2022-10-18","objectID":"/%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/:0:1","tags":["Go语言圣经"],"title":"【Go 语言圣经】复合数据类型","uri":"/%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"categories":["Programming"],"content":" 引用 本文内容来自：Go语言圣经（中文版） 环境配置： 系统：Windows11 编辑器：vscode 注意 本文假设你已经安装了Go并配置好相关环境，如果你还没有安装Go，请前往Go官方网站进行下载安装 🍒 变量 变量是一种使用方便的占位符，用于引用计算机内存地址。 指针 变量有时候被称为可寻址的值。即使变量由表达式临时生成，那么表达式也必须能接受\u0026取地址操作。 每次我们对一个变量取地址，或者复制指针，我们都是为原变量创建了新的别名。 func incr(p *int) int { *p++ // 非常重要：只是增加p指向的变量的值，并不改变p指针！！！ return *p } v := 1 incr(\u0026v) // side effect: v is now 2 fmt.Println(incr(\u0026v)) // \"3\" (and v is 3) 指针特别有价值的地方在于我们可以不用名字而访问一个变量，但是这是一把双刃剑：要找到一个变量的所有访问者并不容易，我们必须知道变量全部的别名（译注：这是Go语言的垃圾回收器所做的工作）。 new函数 表达式new(T)将创建一个T类型的匿名变量，初始化为T类型的零值，然后返回变量地址，返回的指针类型为 p := new(int) // p, *int 类型, 指向匿名的 int 变量 fmt.Println(*p) // \"0\" *p = 2 // 设置 int 匿名变量的值为 2 fmt.Println(*p) // \"2\" 变量的生命周期 var global *int func f() { var x int x = 1 global = \u0026x } func g() { y := new(int) *y = 1 } f函数里的x变量必须在堆上分配，因为它在函数退出后依然可以通过包一级的global变量找到，虽然它是在函数内部定义的；用Go语言的术语说，这个x局部变量从函数f中逃逸了。 相反，当g函数返回时，变量*y将是不可达的，也就是说可以马上被回收的。因此，y并没有从函数g中逃逸，编译器可以选择在栈上分配y的存储空间（译注：也可以选择在堆上分配，然后由Go语言的GC回收这个变量的内存空间），虽然这里用的是new方式。 ","date":"2022-10-18","objectID":"/%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/:0:0","tags":["Go语言圣经"],"title":"【Go 语言圣经】程序结构","uri":"/%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/"},{"categories":["Programming"],"content":" 引用 本文内容来自：Go语言圣经（中文版） 环境配置： 系统：Windows11 编辑器：vscode 注意 本文假设你已经安装了Go并配置好相关环境，如果你还没有安装Go，请前往Go官方网站进行下载安装 🍇 Hello, World 新建文件helloWorld.go package main import \"fmt\" func main() { fmt.Println(\"Hello, 世界\") } 执行命令： go run helloWorld.go 控制台输出： Hello, 世界 使用build子命令： go build helloWrold.go 命令执行完毕在当前目录生成helloWorld.exe文件 🍉 命令行参数 os包 os 包以跨平台的方式，提供了一些与操作系统交互的函数和变量。程序的命令行参数可从 os 包的 Args 变量获取；os 包外部使用 os.Args 访问该变量。 os.Args os.Args 变量是一个字符串（string）的 切片（slice）（译注：slice 和 Python 语言中的切片类似，是一个简版的动态数组） os.Args 的第一个元素：os.Args[0]，是命令本身的名字；其它的元素则是程序启动时传给它的参数。 slice s[m:n] 形式的切片表达式，产生从第 m 个元素到第 n-1 个元素的切片。 如果省略切片表达式的 m 或 n，会默认传入 0 或 len(s)，因此前面的切片可以简写成 os.Args[1:]。 len函数 用于计算数组(包括数组指针)、切片(slice)、map、channel、字符串等数据类型的长度 例子： package main import ( \"fmt\" \"os\" ) func main() { var s, sep string for i := 1; i \u003c len(os.Args); i++ { s += sep + os.Args[i] sep = \" \" } fmt.Println(s) } range关键字 Go 语言中 range 关键字用于 for 循环中迭代数组(array)、切片(slice)、通道(channel)或集合(map)的元素。在数组和切片中它返回元素的索引和索引对应的值，在集合中返回 key-value 对。 例子： package main import ( \"fmt\" \"os\" ) func main() { s, sep := \"\", \"\" for _, arg := range os.Args[1:] { s += sep + arg sep = \" \" } fmt.Println(s) } 空标识符（blank identifier）：_ 空标识符可用于在任何语法需要变量名但程序逻辑不需要的时候（如：在循环里）丢弃不需要的循环索引，并保留元素值。 短变量声明：:= 只能用在函数内部，而不能用于包变量。 例子： func main(){ s := [...]int{1,2,3} } 🍅 查找重复的行 map map 存储了键/值（key/value）的集合，对集合元素，提供常数时间的存、取或测试操作 counts[input.Text()]++ 等价于： line := input.Text() counts[line] = counts[line] + 1 bufio 包 使处理输入和输出方便又高效。 Scanner 类型是该包最有用的特性之一，它读取输入并将其拆成行或单词；通常是处理行形式的输入最简单的方法。 从程序的标准输入中读取内容： input := bufio.NewScanner(os.Stdin) // 每次调用 input.Scan()，即读入下一行，并移除行末的换行符； for input.Scan() { counts[input.Text()]++ } Printf 转换 Printf 有一大堆这种转换，Go程序员称之为动词（verb）。 %d 十进制整数 %x, %o, %b 十六进制，八进制，二进制整数。 %f, %g, %e 浮点数： 3.141593 3.141592653589793 3.141593e+00 %t 布尔：true或false %c 字符（rune） (Unicode码点) %s 字符串 %q 带双引号的字符串\"abc\"或带单引号的字符'c' %v 变量的自然形式（natural format） %T 变量的类型 %% 字面上的百分号标志（无操作数） 查找重复的行：从标准输入中读取数据 // Dup1 prints the text of each line that appears more than // once in the standard input, preceded by its count. package main import ( \"bufio\" \"fmt\" \"os\" ) func main() { counts := make(map[string]int) input := bufio.NewScanner(os.Stdin) for input.Scan() { counts[input.Text()]++ } // NOTE: ignoring potential errors from input.Err() for line, n := range counts { if n \u003e 1 { fmt.Printf(\"%d\\t%s\\n\", n, line) } } } ","date":"2022-10-18","objectID":"/%E5%85%A5%E9%97%A8/:0:0","tags":["Go语言圣经"],"title":"【Go语言圣经】入门","uri":"/%E5%85%A5%E9%97%A8/"},{"categories":["Programming"],"content":" 引用 本文内容来自：Tutorial: Getting started with fuzzing 环境配置： 系统：Windows11 编辑器：vscode 🍄 1. 创建项目 新建fuzz文件夹并用vscode打开 在根目录fuzz下执行命令 go mod init example/fuzz 在根目录fuzz下新建文件main.go： package main import ( \"errors\" \"fmt\" \"unicode/utf8\" ) func main() { input := \"The quick brown fox jumped over the lazy dog\" rev, revErr := Reverse(input) doubleRev, doubleRevErr := Reverse(rev) fmt.Printf(\"original: %q\\n\", input) fmt.Printf(\"reversed: %q, err: %v\\n\", rev, revErr) fmt.Printf(\"reversed again: %q, err: %v\\n\", doubleRev, doubleRevErr) } func Reverse(s string) (string, error) { if !utf8.ValidString(s) { return s, errors.New(\"input is not valid UTF-8\") } r := []rune(s) // type rune = int32； Go 语言通过 rune 处理中文，支持国际化多语言。 for i, j := 0, len(r)-1; i \u003c len(r)/2; i, j = i+1, j-1 { r[i], r[j] = r[j], r[i] } return string(r), nil } 在根目录fuzz下新建文件reverse_test.go： package main import ( \"testing\" \"unicode/utf8\" ) func FuzzReverse(f *testing.F) { testcases := []string{\"Hello, world\", \" \", \"!12345\"} for _, tc := range testcases { f.Add(tc) // Use f.Add to provide a seed corpus } f.Fuzz(func(t *testing.T, orig string) { rev, err1 := Reverse(orig) if err1 != nil { return } doubleRev, err2 := Reverse(rev) if err2 != nil { return } if orig != doubleRev { t.Errorf(\"Before: %q, after: %q\", orig, doubleRev) } if utf8.ValidString(orig) \u0026\u0026 !utf8.ValidString(rev) { t.Errorf(\"Reverse produced invalid UTF-8 string %q\", rev) } }) } 🥕 2. 运行代码 在终端执行命令： go test 输出结果： PASS ok example/fuzz 0.265s 在终端执行命令： go test -fuzz=Fuzz -fuzztime 30s 输出结果： fuzz: elapsed: 0s, gathering baseline coverage: 0/47 completed fuzz: elapsed: 0s, gathering baseline coverage: 47/47 completed, now fuzzing with 8 workers fuzz: elapsed: 3s, execs: 474042 (156924/sec), new interesting: 0 (total: 47) fuzz: elapsed: 6s, execs: 950684 (159465/sec), new interesting: 0 (total: 47) fuzz: elapsed: 9s, execs: 1404211 (151611/sec), new interesting: 0 (total: 47) fuzz: elapsed: 12s, execs: 1902552 (165197/sec), new interesting: 0 (total: 47) fuzz: elapsed: 15s, execs: 2389600 (162590/sec), new interesting: 0 (total: 47) fuzz: elapsed: 18s, execs: 2876083 (162669/sec), new interesting: 0 (total: 47) fuzz: elapsed: 21s, execs: 3355965 (159985/sec), new interesting: 0 (total: 47) fuzz: elapsed: 24s, execs: 3844976 (162641/sec), new interesting: 0 (total: 47) fuzz: elapsed: 27s, execs: 4344065 (166235/sec), new interesting: 0 (total: 47) fuzz: elapsed: 30s, execs: 4846000 (167419/sec), new interesting: 0 (total: 47) fuzz: elapsed: 30s, execs: 4846000 (0/sec), new interesting: 0 (total: 47) PASS ok example/fuzz 30.413s 🥩 3. 关于rune rune 类型是 Go 语言的一种特殊数字类型。在 builtin/builtin.go 文件中，它的定义：type rune = int32；官方对它的解释是：rune 是类型 int32 的别名，在所有方面都等价于它，用来区分字符值跟整数值。使用单引号定义 ，返回采用 UTF-8 编码的 Unicode 码点。Go 语言通过 rune 处理中文，支持国际化多语言。 了解更多rune的知识 ","date":"2022-10-18","objectID":"/fuzz/:0:0","tags":["”Go-document\""],"title":"【Go官方文档】Getting started with fuzzing","uri":"/fuzz/"},{"categories":["Programming"],"content":" 引用 本文内容来自：Tutorial: Getting started with generics 环境配置： 系统：Windows11 编辑器：vscode 🌶️ 创建项目 创建项目文件夹generics并用vscode打开 在终端执行命令： go mod init example/generics 创建文件main.go： package main import \"fmt\" // 定义约束 type Number interface { int64 | float64 } // SumIntsOrFloats sums the values of map m. It supports both int64 and float64 // as types for map values. func SumNumbers[K comparable, V Number](m map[K]V) V { var s V for _, v := range m { s += v } return s } func main() { // Initialize a map for the integer values ints := map[string]int64{ \"first\": 34, \"second\": 12, } // Initialize a map for the float values floats := map[string]float64{ \"first\": 35.98, \"second\": 26.99, } fmt.Printf(\"Generic Sums: %v and %v\\n\", SumNumbers(ints), SumNumbers(floats)) } 🥕 运行代码 在终端执行命令： go run . 执行结果： Generic Sums: 46 and 62.97 ","date":"2022-10-18","objectID":"/generics/:0:0","tags":["”Go-document\""],"title":"【Go官方文档】Getting started with generics","uri":"/generics/"},{"categories":["Programming"],"content":" 引用 本文内容来自：Tutorial: Developing a RESTful API with Go and Gin 环境配置： 系统：Windows11 编辑器：vscode 🍐 创建项目 创建项目文件夹web-service-gin并用vscode打开该项目 初始化go mod go mod init example/web-service-gin 创建文件main.go package main import ( \"net/http\" \"github.com/gin-gonic/gin\" ) type album struct { ID string `json:\"id\"` Title string `json:\"title\"` Artist string `json:\"artist\"` Price float64 `json:\"price\"` } var albums = []album{ {ID: \"1\", Title: \"Blue Train\", Artist: \"John Coltrane\", Price: 56.99}, {ID: \"2\", Title: \"Jeru\", Artist: \"Gerry Mulligan\", Price: 17.99}, {ID: \"3\", Title: \"Sarah Vaughan and Clifford Brown\", Artist: \"Sarah Vaughan\", Price: 39.99}, } func getAlbums(c *gin.Context) { c.IndentedJSON(http.StatusOK,albums) } func main() { router := gin.Default() router.GET(\"albums\",getAlbums) router.Run(\"localhost:8080\") } 🥝 运行项目 执行命令： go run . 打开浏览器，地址栏输入：http://localhost:8080/albums,回车确定 浏览器显示内容： [ { \"id\": \"1\", \"title\": \"Blue Train\", \"artist\": \"John Coltrane\", \"price\": 56.99 }, { \"id\": \"2\", \"title\": \"Jeru\", \"artist\": \"Gerry Mulligan\", \"price\": 17.99 }, { \"id\": \"3\", \"title\": \"Sarah Vaughan and Clifford Brown\", \"artist\": \"Sarah Vaughan\", \"price\": 39.99 } ] ","date":"2022-10-17","objectID":"/restfull/:0:0","tags":["”Go-document\""],"title":"【Go官方文档】Developing a RESTful API with Go and Gin","uri":"/restfull/"},{"categories":["Programming"],"content":" 引用 本文内容来自：Tutorial: Create a Go module 环境配置： 系统：Windows11 编辑器：vscode 🍒 1. 创建项目 创建项目文件夹greetings并用vscode打开该项目 在根目录greetings下创建文件夹mymodule并创建greeting.go文件 package greeting import \"fmt\" // Hello returns a greeting for the named person. func Hello(name string) string { // Return a greeting that embeds the name in a message. message := fmt.Sprintf(\"Hi, %v. Welcome!\", name) return message } 在根目录greetings下创建hello.go文件 package main import ( \"fmt\" \"learninggo/mymodule\" ) func main() { message := greeting.Hello(\"小明\") fmt.Println(message) } 运行代码 在根目录打开命令提示行： go run . 控制台输出： Hi, 小明. Welcome! ","date":"2022-10-17","objectID":"/gomodule/:0:0","tags":["”Go-document\""],"title":"【Go官方文档】Create a Go module","uri":"/gomodule/"},{"categories":["Programming"],"content":" 引用 本文内容来自：Tutorial: Get started with Go 环境配置： 系统：Windows11 编辑器：vscode 🍇 1. 创建项目 新建文件夹learninggo并用vscode打开 在根目录learninggo下执行命令： go mod init learninggo 自动创建go.mod文件： module learninggo go 1.19 🍉 2. 编写代码 创建hello.go文件： package main import \"fmt\" func main() { fmt.Println(\"Hello wrold!\") } 运行 hello.go： go run . 控制台输出： Hello wrold! ","date":"2022-10-17","objectID":"/getting-started/:0:0","tags":["Go-document"],"title":"【Go官方文档】Get started with Go","uri":"/getting-started/"},{"categories":["Programming"],"content":" 注意 本文内容来源于：【Github】后端面试题集 🧨 什么是channel，为什么它可以做到线程安全？ 展开查看详情 Channel是Go中的⼀个核⼼类型，可以把它看成⼀个管道，通过它并发核⼼单元就可以发送或者接收数据进⾏通讯(communication),Channel也可以理解是⼀个先进先出的队列，通过管道进⾏通信。 Golang的Channel,发送⼀个数据到Channel 和 从Channel接收⼀个数据 都是 原⼦性的。⽽且Go的设计思想就是:不要通过共享内存来通信，⽽是通过通信来共享内存，前者就是传统的加锁，后者就是Channel。也就是说，设计Channel的主要⽬的就是在多任务间传递数据的，这当然是安全的。 ✨ 读写锁或者互斥锁读的时候能写吗? --查看答案-- 答案：Go中读写锁包括读锁和写锁，多个读线程可以同时访问共享数据；写线程必须等待所有读线程都释放锁以后，才能取得锁；同样的，读线程必须等待写线程释放锁后，才能取得锁，也就是说读写锁要确保的是如下互斥关系，可以同时读，但是读-写，写-写都是互斥的。 🎈 Channel是同步的还是异步的. 展开查看详情 Channel是异步进⾏的。 channel存在3种状态： nil，未初始化的状态，只进⾏了声明，或者⼿动赋值为nil nil，未初始化的状态，只进⾏了声明，或者⼿动赋值为nil closed，已关闭，千万不要误认为关闭channel后，channel的值是nil 🎉 下列哪个类型可以使⽤ cap()函数？ A. array B. slice C. map D. channel --查看答案-- 答案：A B D；array 返回数组的元素个数；slice 返回 slice 的最⼤容量；channel 返回 channel 的容量； 🎊 Data Race问题怎么解决？能不能不加锁解决这个问题？ 展开查看详情 同步访问共享数据是处理数据竞争的⼀种有效的⽅法.golang在1.1之后引⼊了竞争检测机制，可以使⽤ go run -race 或者 go build -race来进⾏静态检测。 其在内部的实现是,开启多个协程执⾏同⼀个命令， 并且记录下每个变量的状态. 竞争检测器基于C/C++的ThreadSanitizer 运⾏时库，该库在Google内部代码基地和Chromium找到许多错误。这个技术在2012年九⽉集成到Go中，从那时开始，它已经在标准库中检测到42个竞争条件。现在，它已经是我们持续构建过程的⼀部分，当竞争条件出现时，它会继续捕捉到这些错误。 竞争检测器已经完全集成到Go⼯具链中，仅仅添加-race标志到命令⾏就使⽤了检测器。 $ go test -race mypkg // 测试包 $ go run -race mysrc.go // 编译和运⾏程序 $ go build -race mycmd // 构建程序 $ go install -race mypkg // 安装程序 要想解决数据竞争的问题可以使⽤互斥锁sync.Mutex,解决数据竞争(Data race),也可以使⽤管道解决,使⽤管道的效率要⽐互斥锁⾼. 🎋 如何在运⾏时检查变量类型？ --查看答案-- 答案：类型开关是在运⾏时检查变量类型的最佳⽅式。类型开关按类型⽽不是值来评估变量。每个 Switch ⾄少包含⼀个case，⽤作条件语句，和⼀个 defaultcase，如果没有⼀个 case 为真，则执⾏。 🎍 Go 两个接⼝之间可以存在什么关系？ --查看答案-- 答案：如果两个接⼝有相同的⽅法列表，那么他们就是等价的，可以相互赋值。如果接⼝ A的⽅法列表是接⼝ B的⽅法列表的⾃⼰，那么接⼝ B可以赋值给接⼝ A。接⼝查询是否成功，要在运⾏期才能够确定。 🎎 关于map，下⾯说法正确的是？ A. map 反序列化时 json.unmarshal() 的⼊参必须为 map 的地址； B. 在函数调⽤中传递 map，则⼦函数中对 map 元素的增加不会导致⽗函数中 map 的修改； C. 在函数调⽤中传递 map，则⼦函数中对 map 元素的修改不会导致⽗函数中 map 的修改； D. 不能使⽤内置函数 delete() 删除 map 的元素 --查看答案-- 答案：A 🎏 关于同步锁，下⾯说法正确的是？ A. 当⼀个 goroutine 获得了 Mutex 后，其他 goroutine 就只能乖乖的等待，除⾮该 goroutine 释放这个 Mutex； B. RWMutex 在读锁占⽤的情况下，会阻⽌写，但不阻⽌读； C. RWMutex 在写锁占⽤情况下，会阻⽌任何其他 goroutine（⽆论读和写）进来，整个锁相当于由该 goroutine独占； D. Lock() 操作需要保证有 Unlock() 或 RUnlock() 调⽤与之对应； --查看答案-- 答案：A B C 🎐 Go 当中同步锁有什么特点？作⽤是什么 展开查看详情 当⼀个 Goroutine（协程）获得了 Mutex 后，其他 Gorouline（协程）就只能乖乖的等待，除⾮该 gorouline 释放了该 MutexRWMutex在读锁占⽤的情况下，会阻⽌写，但不阻⽌读 RWMutex 在写锁占⽤情况下，会阻⽌任何其他 goroutine（⽆论读和写）进来，整个锁相当于由该 goroutine 独占同步锁的作⽤是保证资源在使⽤时的独有性，不会因为并发⽽导致数据错乱，保证系统的稳定性。 🎑 Go 语⾔当中 Channel（通道）有什么特点，需要注意什么？ --查看答案-- 答案：如果给⼀个 nil 的 channel 发送数据，会造成永远阻塞如果从⼀个 nil 的 channel 中接收数据，也会造成永久爱阻塞给⼀个已经关闭的 channel 发送数据，会引起 pannic 从⼀个已经关闭的 channel 接收数据，如果缓冲区中为空，则返回⼀个零值。 🎀 Go 语⾔当中 Channel 缓冲有什么特点？ --查看答案-- 答案：⽆缓冲的 channel 是同步的，⽽有缓冲的 channel 是⾮同步的。 🎁 关于channel，下⾯语法正确的是? A. var ch chan int B. ch := make(chan int) C. \u003c- ch D. ch \u003c- --查看答案-- 答案：A B C；解析：写 chan 时，\u003c- 右端必须要有值 🎗️ Go 语⾔中 cap 函数可以作⽤于那些内容？ 展开查看详情 cap 函数在讲引⽤的问题中已经提到，可以作⽤于的类型有： array(数组) slice(切⽚) channel(通道) 🎟️ go convey 是什么？⼀般⽤来做什么？ 展开查看详情 go convey 是⼀个⽀持 golang 的单元测试框架 go convey 是⼀个⽀持 golang 的单元测试框架 go convey 提供了丰富的断⾔简化测试⽤例的编写 🎖️ Go 语⾔当中 new 和 make 有什么区别吗？ 展开查看详情 new的作⽤是初始化⼀个纸箱类型的指针 new函数是内建函数，函数定义： func new(Type)*Type 使⽤ new函数来分配空间 传递给 new函数的是⼀个类型，⽽不是⼀个值 返回值是指向这个新⾮配的地址的指针 🏆 Go 语⾔中 make 的作⽤是什么？ make的作⽤是为 slice, map or chan 的初始化然后返回引⽤ make函数是内建函数，函数定义： func make(Type, size IntegerType) Type make(T, args)函数的⽬的和 new(T)不同仅仅⽤于创建 slice, map, channel ⽽且返回类型是实例。 🏅 Printf(),Sprintf(),FprintF()都是格式化输出，有什么不同？ --查看答案-- 答案：虽然这三个函数，都是格式化输出，但是输出的⽬标不⼀样 Printf 是标准输出，⼀般是屏幕，也可以重定向。Sprintf()是把格式化字符串输出到指定的字符串中。 Fprintf()是吧格式化字符串输出到⽂件中。 ⚽ Go 语⾔当中数组和切⽚的区别是什么？ 展开查看详情 数组：数组固定⻓度数组⻓度是数组类型的⼀部分，所以[3]int 和[4]int 是两种不同的数组类型数组需要指定⼤⼩，不指定也会根据处初始化对的⾃动推算出⼤⼩，不可改变数组是通过值传递的 切⽚：切⽚可以改变⻓度切⽚是轻量级的数据结构，三个属性，指针，⻓度，容量不需要指定⼤⼩切⽚是地址传递（引⽤传递）可以通过数组来初始化，也可以通过内置函数 make()来初始化，初始化的时候 len=cap，然后进⾏扩容。 ⚾ Go 语⾔当中值传递和地址传递（引⽤传递）如何运⽤？有什么区别？举例说明 展开查看详情 值传递只会把参数的值复制⼀份放进对应的函数，两个变量的地址不同，不可相互修改。 地址传递(引⽤传递)会将变量本身传⼊对应的函数，在函数中可以对该变量进⾏值内容的修改。 🥎 Go 语⾔当中数组和切⽚在传递的时候的区别是什么？ --查看答案-- 答案：1. 数组是值传递；2. 切⽚是引⽤传递 🏀 Go 语⾔是如何实现切⽚扩容的？ 展开查看详情 func main(){ arr := make([]int,0) for i := 0; i \u003c 2000; i++{ fmt.Println(\"len 为\", len(arr),\"cap 为\", cap(arr)) arr = append(arr, i) } } 结果：依次是0","date":"2022-10-16","objectID":"/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8603/:0:0","tags":["interview","Golang"],"title":"【面试】后端面试题集03","uri":"/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8603/"},{"categories":["Programming"],"content":" 注意 本文内容来源于：【Github】后端面试题集 🎆 说下Go中的锁有哪些?三种锁，读写锁，互斥锁，还有map的安全的锁? Go中的三种锁包括:互斥锁,读写锁,sync.Map的安全的锁. 互斥锁 Go并发程序对共享资源进⾏访问控制的主要⼿段，由标准库代码包中sync中的Mutex结构体表示。 //Mutex 是互斥锁， 零值是解锁的互斥锁， ⾸次使⽤后不得复制互斥锁。 type Mutex struct { state int32 sema uint32 } sync.Mutex包中的类型只有两个公开的指针⽅法Lock和Unlock。 //Locker表示可以锁定和解锁的对象。 type Locker interface { Lock() Unlock() } //锁定当前的互斥量 //如果锁已被使⽤，则调⽤goroutine //阻塞直到互斥锁可⽤。 func (m *Mutex) Lock() //对当前互斥量进⾏解锁 //如果在进⼊解锁时未锁定m，则为运⾏时错误。 //锁定的互斥锁与特定的goroutine⽆关。 //允许⼀个goroutine锁定Mutex然后安排另⼀个goroutine来解锁它。 func (m *Mutex) Unlock() 声明⼀个互斥锁： var mutex sync.Mutex 不像C或Java的锁类⼯具，我们可能会犯⼀个错误：忘记及时解开已被锁住的锁，从⽽导致流程异常。但Go由于存在defer，所以此类问题出现的概率极低。关于defer解锁的⽅式如下： var mutex sync.Mutex func Write() { mutex.Lock() defer mutex.Unlock() } 如果对⼀个已经上锁的对象再次上锁，那么就会导致该锁定操作被阻塞，直到该互斥锁回到被解锁状态. ort ( \"fmt\" \"sync\" \"time\" ) func main() { var mutex sync.Mutex fmt.Println(\"begin lock\") mutex.Lock() fmt.Println(\"get locked\") for i := 1; i \u003c= 3; i++ { go func(i int) { fmt.Println(\"begin lock \", i) mutex.Lock() fmt.Println(\"get locked \", i) }(i) } time.Sleep(time.Second) fmt.Println(\"Unlock the lock\") mutex.Unlock() fmt.Println(\"get unlocked\") time.Sleep(time.Second) } 我们在for循环之前开始加锁，然后在每⼀次循环中创建⼀个协程，并对其加锁，但是由于之前已经加锁了，所以这个for循环中的加锁会陷⼊阻塞直到main中的锁被解锁， time.Sleep(time.Second) 是为了能让系统有⾜够的时间运⾏for循环，输出结果如下： \u003e go run mutex.go begin lock get locked begin lock 3 begin lock 1 begin lock 2 Unlock the lock get unlocked get locked 3 这⾥可以看到解锁后，三个协程会重新抢夺互斥锁权，最终协程3获胜。 互斥锁锁定操作的逆操作并不会导致协程阻塞，但是有可能导致引发⼀个⽆法恢复的运⾏时的panic，⽐如对⼀个未锁定的互斥锁进⾏解锁时就会发⽣panic。避免这种情况的最有效⽅式就是使⽤defer。 我们知道如果遇到panic，可以使⽤recover⽅法进⾏恢复，但是如果对重复解锁互斥锁引发的panic却是⽆⽤的（Go 1.8及以后）。 package main import ( \"fmt\" \"sync\" ) func main() { defer func() { fmt.Println(\"Try to recover the panic\") if p := recover(); p != nil { fmt.Println(\"recover the panic : \", p) } }() var mutex sync.Mutex fmt.Println(\"begin lock\") mutex.Lock() fmt.Println(\"get locked\") fmt.Println(\"unlock lock\") mutex.Unlock() fmt.Println(\"lock is unlocked\") fmt.Println(\"unlock lock again\") mutex.Unlock() } 运⾏: \u003e go run mutex.go begin lock get locked unlock lock l error: sync: unlock of unlocked mutex goroutine 1 [running]: runtime.throw(0x4bc1a8, 0x1e) /home/keke/soft/go/src/runtime/panic.go:617 +0x72 fp=0xc000084ea8 sp=0xc000084e78 pc=0x427ba2 sync.throw(0x4bc1a8, 0x1e) /home/keke/soft/go/src/runtime/panic.go:603 +0x35 fp=0xc000084ec8 sp=0xc000084ea8 pc=0x427b25 sync.(*Mutex).Unlock(0xc00001a0c8) /home/keke/soft/go/src/sync/mutex.go:184 +0xc1 fp=0xc000084ef0 sp=0xc000084ec8 pc=0x45f821 main.main() /home/keke/go/Test/mutex.go:25 +0x25f fp=0xc000084f98 sp=0xc000084ef0 pc=0x486c1f runtime.main() /home/keke/soft/go/src/runtime/proc.go:200 +0x20c fp=0xc000084fe0 sp=0xc000084f98 pc=0x4294ec runtime.goexit() /home/keke/soft/go/src/runtime/asm_amd64.s:1337 +0x1 fp=0xc000084fe8 sp=0xc000084fe0 pc=0x450ad1 exit status 2 这⾥试图对重复解锁引发的panic进⾏recover，但是我们发现操作失败，虽然互斥锁可以被多个协程共享，但还是建议将对同⼀个互斥锁的加锁解锁操作放在同⼀个层次的代码中。 读写锁 读写锁是针对读写操作的互斥锁，可以分别针对读操作与写操作进⾏锁定和解锁操作 。 读写锁的访问控制规则如下： 多个写操作之间是互斥的 写操作与读操作之间也是互斥的 多个读操作之间不是互斥的 在这样的控制规则下，读写锁可以⼤⼤降低性能损耗。 在Go的标准库代码包中sync中的RWMutex结构体表示为: // RWMutex是⼀个读/写互斥锁，可以由任意数量的读操作或单个写操作持有。 // RWMutex的零值是未锁定的互斥锁。 //⾸次使⽤后，不得复制RWMutex。 //如果goroutine持有RWMutex进⾏读取⽽另⼀个goroutine可能会调⽤Lock，那么在释放初始读锁之前， goroutine不应该期望能够获取读锁定。 //特别是，这种禁⽌递归读锁定。 这是为了确保锁最终变得可⽤; 阻⽌的锁定会阻⽌新读操作获取锁定。 type RWMutex struct { w Mutex //如果有待处理的写操作就持有 writerSem uint32 // 写操作等待读操作完成的信号量 readerSem uint32 //读操作等待写操作完成的信号量 readerCount int32 // 待处理的读操作数量 readerWait int32 // number of departing readers } sync中的RWMutex有以下⼏种⽅法： //对读操作的锁定 func (rw *RWMutex) RLock() //对读操作的解锁 func (rw *RWMutex) RUnlock() //对写操作的锁定 func (rw *RWMutex) Lock() //对写操作的解锁 func (rw *RWMutex) Unlock() //返回⼀个实现了sync.Locker接⼝类型的值，实际上是回调rw.RLock and rw.RUnlock. func (rw *RWMutex) RLocker() Locker Unlock⽅法会试图唤醒所有想进⾏读锁定⽽被阻塞的协程，⽽ RUnlock⽅法只会在已⽆任何读锁定的情况下，试图唤醒⼀个因欲进⾏写锁定⽽被阻塞的协程。若对⼀个未被写锁定的读写锁进⾏写解锁，就会引发⼀个不可恢复的panic，同理对⼀个未被读锁定的读写锁进⾏读写锁也会如此。 由于读写锁控制下的多个读操作之间不是互斥的，因此对于读解锁更容易被忽视。对于同⼀个读写锁，添加多少个读锁定，就必要有等量的读解锁，这样才能其他协程有机会进⾏操作。 package main import ( \"fmt\" \"sync\" \"ti","date":"2022-10-16","objectID":"/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8602/:0:0","tags":["interview","Golang"],"title":"【面试】后端面试题集02","uri":"/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8602/"},{"categories":["Programming"],"content":" 注意 本文内容来源于：【Github】后端面试题集 🍦 关于整型切⽚的初始化，下⾯正确的是？ A. s := make([]int) B. s := make([]int, 0) C. s := make([]int, 5, 10) D. s := []int{1, 2, 3, 4, 5} --查看答案-- 答案：B C D 🍧 下列代码是否会触发异常？ func Test59(t *testing.T) { runtime.GOMAXPROCS(1) intChan := make(chan int, 1) stringChan := make(chan string, 1) intChan \u003c- 1 stringChan \u003c- \"hello\" select { case value := \u003c-intChan: fmt.Println(value) case value := \u003c-stringChan: panic(value) } } --查看答案-- 答案：不⼀定，当两个chan同时有值时，select 会随机选择⼀个可⽤通道做收发操作 🍨 关于channel的特性，下⾯说法正确的是？ A. 给⼀个 nil channel 发送数据，造成永远阻塞 B. 从⼀个 nil channel 接收数据，造成永远阻塞 C. 给⼀个已经关闭的 channel 发送数据，引起 panic D. 从⼀个已经关闭的 channel 接收数据，如果缓冲区中为空，则返回⼀个零值 --查看答案-- 答案：A B C D 🍩 下列代码有什么问题？ const i = 100 var j = 123 func main() { fmt.Println(\u0026j, j) fmt.Println(\u0026i, i) } --查看答案-- 答案：Go语⾔中，常量⽆法寻址, 是不能进⾏取指针操作的 🍪 下列代码输出什么？ func Test62(t *testing.T) { x := []string{\"a\", \"b\", \"c\"} for v := range x { fmt.Print(v) } } --查看答案-- 答案：012， 解析：range ⼀个返回值时，这个值是下标，两个值时，第⼀个是下标，第⼆个是值，当 x 为 map时，第⼀个是key，第⼆个是value 🎂 关于⽆缓冲和有冲突的channel，下⾯说法正确的是？ A. ⽆缓冲的channel是默认的缓冲为1的channel； B. ⽆缓冲的channel和有缓冲的channel都是同步的； C. ⽆缓冲的channel和有缓冲的channel都是⾮同步的； D. ⽆缓冲的channel是同步的，⽽有缓冲的channel是⾮同步的； --查看答案-- 答案：D 🍰 下列代码输出什么？ func Foo(x interface{}) { if x == nil { fmt.Println(\"empty interface\") return } fmt.Println(\"non-empty interface\") } func Test64(t *testing.T) { var x *int = nil Foo(x) } --查看答案-- 答案：non-empty interface，解析：接⼝除了有静态类型，还有动态类型和动态值，当且仅当动态值和动态类型都为 nil 时，接⼝类型值才为 nil。这⾥的 x 的动态类型是 *int，所以 x 不为 nil 🧁 关于select机制，下⾯说法正确的是? A. select机制⽤来处理异步IO问题； B. select机制最⼤的⼀条限制就是每个case语句⾥必须是⼀个IO操作； C. golang在语⾔级别⽀持select关键字； D. select关键字的⽤法与switch语句⾮常类似，后⾯要带判断条件； --查看答案-- 答案：A B C 🥧 关于字符串拼接,下列正确的是? A. str := ‘abc’ + ‘123’ B. str := “abc” + “123” C. str ：= ‘123’ + “abc” D. fmt.Sprintf(“abc%d”, 123) --查看答案-- 答案：B D 双引号⽤来表示字符串 string，其实质是⼀个 byte 类型的数组，单引号表示 rune 类型。 🍫 连nil切⽚和空切⽚⼀不⼀样都不清楚？ 连nil切片和空切片一不一样都不清楚？那BAT面试官只好让你回去等通知了。 🍬 golang⾯试题：字符串转成byte数组，会发⽣内存拷⻉吗？ golang⾯试题：字符串转成byte数组，会发⽣内存拷⻉吗？ 🍭 golang⾯试题：翻转含有中⽂、数字、英⽂字⺟的字符串 golang⾯试题：翻转含有中⽂、数字、英⽂字⺟的字符串 🍮 golang⾯试题：拷⻉⼤切⽚⼀定⽐⼩切⽚代价⼤吗？ golang⾯试题：拷⻉⼤切⽚⼀定⽐⼩切⽚代价⼤吗？ 🍯 golang⾯试题：json包变量不加tag会怎么样？ golang⾯试题：json包变量不加tag会怎么样？ 🍼 golang⾯试题：reflect（反射包）如何获取字段tag？为什么json包不能导出私有变量的tag？ golang⾯试题：reflect（反射包）如何获取字段tag？为什么json包不能导出私有变量的tag？ 🥛 昨天那个在for循环⾥append元素的同事，今天还在么？ 昨天那个在for循环⾥append元素的同事，今天还在么？ ☕ go struct能不能⽐较 --查看答案-- 答案：相同struct类型的可以⽐较；不同struct类型的不可以⽐较,编译都不过，类型不匹配 🍵 Go ⽀持什么形式的类型转换？将整数转换为浮点数。 --查看答案-- 答案：Go ⽀持显式类型转换以满⾜其严格的类型要求。 🍶 Log包线程安全吗？ --查看答案-- 答案：Golang的标准库提供了log的机制，但是该模块的功能较为简单（看似简单，其实他有他的设计思路）。在输出的位置做了线程安全的保护。 🍾 Goroutine和线程的区别? 展开查看详情 从调度上看，goroutine的调度开销远远⼩于线程调度开销。 OS的线程由OS内核调度，每隔⼏毫秒，⼀个硬件时钟中断发到CPU，CPU调⽤⼀个调度器内核函数。这个函数暂停当前正在运⾏的线程，把他的寄存器信息保存到内存中，查看线程列表并决定接下来运⾏哪⼀个线程，再从内存中恢复线程的注册表信息，最后继续执⾏选中的线程。这种线程切换需要⼀个完整的上下⽂切换：即保存⼀个线程的状态到内存，再恢复另外⼀个线程的状态，最后更新调度器的数据结构。某种意义上，这种操作还是很慢的。 Go运⾏的时候包涵⼀个⾃⼰的调度器，这个调度器使⽤⼀个称为⼀个M:N调度技术，m个goroutine到n个os线程（可以⽤GOMAXPROCS来控制n的数量），Go的调度器不是由硬件时钟来定期触发的，⽽是由特定的go语⾔结构来触发的，他不需要切换到内核语境，所以调度⼀个goroutine⽐调度⼀个线程的成本低很多。 从栈空间上，goroutine的栈空间更加动态灵活。 每个OS的线程都有⼀个固定⼤⼩的栈内存，通常是2MB，栈内存⽤于保存在其他函数调⽤期间哪些正在执⾏或者临时暂停的函数的局部变量。这个固定的栈⼤⼩，如果对于goroutine来说，可能是⼀种巨⼤的浪费。作为对⽐goroutine在⽣命周期开始只有⼀个很⼩的栈，典型情况是2KB, 在go程序中，⼀次创建⼗万左右的goroutine也不罕⻅（2KB*100,000=200MB）。⽽且goroutine的栈不是固定⼤⼩，它可以按需增⼤和缩⼩，最⼤限制可以到1GB。 goroutine没有⼀个特定的标识。 在⼤部分⽀持多线程的操作系统和编程语⾔中，线程有⼀个独特的标识，通常是⼀个整数或者指针，这个特性可以让我们构建⼀个线程的局部存储，本质是⼀个全局的map，以线程的标识作为键，这样每个线程可以独⽴使⽤这个map存储和获取值，不受其他线程⼲扰。 goroutine中没有可供程序员访问的标识，原因是⼀种纯函数的理念，不希望滥⽤线程局部存储导致⼀个不健康的超距作⽤，即函数的⾏为不仅取决于它的参数，还取决于运⾏它的线程标识。 🍷下列哪⼀⾏会panic? func Test76(t *testing.T) { var x interface{} var y interface{} = []int{3, 5} _ = x == x _ = x == y _ = y == y } --查看答案-- 答案：_ = y == y 会发⽣panic, 因为两个⽐较值的动态类型为同⼀个不可⽐较类型 🍷 下列哪⾏代码会panic? func Test77(t *testing.T) { x := make([]int, 2, 10) _ = x[6:10] _ = x[6:] _ = x[2:] } --查看答案-- 答案：_ = x[6:] 这⼀⾏会发⽣panic, 截取符号 [i:j]，如果 j 省略，默认是原切⽚或者数组的⻓度，x 的⻓度是 2，⼩于起始下标 6 ，所以 panic 🍸 什么是 Goroutine？你如何停⽌它？ 展开查看详情 ⼀个 Goroutine 是⼀个函数或⽅法执⾏同时旁边其他任何够程采⽤了特殊的 Goroutine 线程。Goroutine 线程⽐标准线程更轻量级，⼤多数 Golang 程序同时使⽤数千个 g、Goroutine。 要创建 Goroutine，请 go 在函数声明之前添加go关键字。 您可以通过向 Go","date":"2022-10-15","objectID":"/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8601/:0:0","tags":["interview","Golang"],"title":"【面试】后端面试题集01","uri":"/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%8601/"},{"categories":["Programming"],"content":" 注意 本文内容来源于：【知乎】Go常见面试题【由浅入深】2022版 🍇 = 和 := 的区别 --查看答案-- =是赋值变量，:=是定义变量 🍈 指针的作用 展开查看详情 获取变量的值 import fmt func main(){ a := 1 p := \u0026a // 获取地址 fmt.Prinf(*p) // 获取值 } 改变变量的值 // 交换函数 func swap(a,b *int){ *a,*b = *b,*a; } 用指针替代传入函数 type A struct{} func (a *A) fun(){} 🍉 Go有异常类型吗 展开查看详情 有。 Go用error类型代替try…catch _,err := funcDemo() if err != nil { fmt.Println(err) return } 也可以用errors.New()来定义自己的异常。 type errorString struct { s string } func (e *errorString) Error() string { return e.s } // 多一个函数当作构造函数 func New(text string) error { return \u0026errorString{text} } 🍊 什么是协程(Goroutine) --查看答案-- 协程是用户状态轻量级线程，它是线程调度的基本单位 展开了解更多 通常在函数前加上go关键字就能实现并发。一个Goroutine会以一个很小的栈启动2KB或4KB，当遇到栈空间不足时，栈会自动伸缩， 因此可以轻易实现成千上万个goroutine同时启动。 🍋 如何高效地拼接字符串 --查看答案-- strings.Join ≈ strings.Builder \u003e bytes.Buffer \u003e “+” \u003e fmt.Sprintf 展开了解更多 利用加号(+) 使用+操作符进行拼接时，会对字符串进行遍历，计算并开辟一个新的空间来存储原来的两个字符串。 fmt.Sprintf 由于采用了接口参数，必须要用反射获取值，因此有性能损耗。 strings.Builder 用WriteString()进行拼接，内部实现是指针+切片，同时String()返回拼接后的字符串，它是直接把[]byte转换为string，从而避免变量拷贝。 bytes.Buffer bytes.Buffer是一个一个缓冲byte类型的缓冲器，这个缓冲器里存放着都是byte，bytes.buffer底层也是一个[]byte切片。 strings.join strings.join也是基于strings.builder来实现的,并且可以自定义分隔符，在join方法内调用了b.Grow(n)方法，这个是进行初步的容量分配，而前面计算的n的长度就是我们要拼接的slice的长度，因为我们传入切片长度固定，所以提前进行容量分配可以减少内存分配，很高效。 🍌 什么是 rune 类型 --查看答案-- Unicode在 Go 语言中称之为 rune，是 int32 类型的别名。 🍍 如何判断 map 中是否包含某个 key ？ var sample map[int]int if _, ok := sample[10]; ok { } else { } 🥭 Go 支持默认参数或可选参数吗？ --查看答案-- 不支持。但是可以利用结构体参数，或者…传入参数切片数组。 // 这个函数可以传入任意数量的整型参数 func sum(nums ...int) { total := 0 for _, num := range nums { total += num } fmt.Println(total) } 🍎 defer 的执行顺序 --查看答案-- defer执行顺序和调用顺序相反，类似于栈后进先出(LIFO)。 func test() int { i := 0 defer func() { fmt.Println(\"defer1\") }() defer func() { i += 1 fmt.Println(\"defer2\") }() return i } func main() { fmt.Println(\"return\", test()) } // defer2 // defer1 // return 0 func test() (i int) { i = 0 defer func() { i += 1 fmt.Println(\"defer2\") }() return i } func main() { fmt.Println(\"return\", test()) } // defer2 // return 1 🍏 如何获取一个结构体的所有tag？ 展开查看 利用反射 import reflect type Author struct { Name int `json:Name` Publications []string `json:Publication,omitempty` } func main() { t := reflect.TypeOf(Author{}) for i := 0; i \u003c t.NumField(); i++ { name := t.Field(i).Name s, _ := t.FieldByName(name) fmt.Println(name, s.Tag) } } 🍐 如何判断 2 个字符串切片（slice) 是相等的？ --查看答案-- reflect.DeepEqual() ， 但反射非常影响性能。 🍑 结构体打印时，%v 和 %+v 的区别 展开查看 %v输出结构体各成员的值； %+v输出结构体各成员的名称和值； %#v输出结构体名称和结构体各成员的名称和值 🍒 Go 语言中如何表示枚举值(enums)？ const ( B = 1 \u003c\u003c (10 * iota) KiB MiB GiB TiB PiB EiB ) 🍓 空 struct{} 的用途 --查看答案-- 用map模拟一个set，那么就要把值置为struct{}，struct{}本身不占任何空间，可以避免任何多余的内存分配。 type Set map[string]struct{} func main() { set := make(Set) for _, item := range []string{\"A\", \"A\", \"B\", \"C\"} { set[item] = struct{}{} } fmt.Println(len(set)) // 3 if _, ok := set[\"A\"]; ok { fmt.Println(\"A exists\") // A exists } } 🥝 init() 函数是什么时候执行的？ --查看答案-- 在main函数之前执行。 展开查看详情 init()函数是go初始化的一部分，由runtime初始化每个导入的包，初始化不是按照从上到下的导入顺序，而是按照解析的依赖关系，没有依赖的包最先初始化。 每个包首先初始化包作用域的常量和变量（常量优先于变量），然后执行包的init()函数。同一个包，甚至是同一个源文件可以有多个init()函数。init()函数没有入参和返回值，不能被其他函数调用，同一个包内多个init()函数的执行顺序不作保证。 执行顺序：import –\u003e const –\u003e var –\u003einit()–\u003emain() 一个文件可以有多个init()函数！ 🍅 如何知道一个对象是分配在栈上还是堆上？ --查看答案-- Go和C++不同，Go局部变量会进行逃逸分析。如果变量离开作用域后没有被引用，则优先分配到栈上，否则分配到堆上。 🥥 2个nil 可能不相等吗？ --查看答案-- 可能不等。interface在运行时绑定值，只有值为nil接口值才为nil，但是与指针的nil不相等。 🫐 简述 Go 语言GC(垃圾回收)的工作原理 --查看答案-- 垃圾回收机制是Go一大特(nan)色(dian)。Go1.3采用标记清除法， Go1.5采用三色标记法，Go1.8采用三色标记法+混合写屏障。 🫒 函数返回局部变量的指针是否安全？ --查看答案-- 这一点和C++不同，在Go里面返回局部变量的指针是安全的。因为Go会进行逃逸分析，如果发现局部变量的作用域超过该函数则会把指针分配到堆区，避免内存泄漏。 🥑 非接口的任意类型 T() 都能够调用 *T 的方法吗？反过来呢？ --查看答案-- 一个T类型的值可以调用T类型声明的方法，当且仅当T是可寻址的。反之：T 可以调用T()的方法，因为指针可以解引用。 🍆 go slice是怎么扩容的？ 展开查看 Go \u003c= 1.17 如果当前容量小于1024，则判断所需容量是否大于原来容量2倍，如果大于，当前容量加上所需容量；否则当前容量乘2。 如果当前容量大于1024，则每次按照1.25倍速度递增容量，也就是每次加上cap/4。 Go1.18之后，引入了新的扩容规则：浅谈 Go 1.18.1的切片扩容机制 🥔 无缓冲的 channel 和有缓冲的 channel 的区别？ 展开查看 对于无缓冲区channel： 发送的数据如果没有被接收方接收，那么发送方阻塞；如果一直接收不到发送方的数据，接收方阻塞； 有缓冲的channel： 发送方在缓冲区满的时候阻塞，接收方不阻塞；接收方在缓冲区为空的时候阻塞，发送方不阻塞。 🥕 为什么有协程泄露(Goroutine Leak)？ 展开查看 协程泄漏是指协","date":"2022-10-13","objectID":"/go%E8%AF%AD%E8%A8%80%E9%9D%A2%E8%AF%95%E9%A2%98/:0:0","tags":["zhihu","interview","Golang"],"title":"【面试】Go常见面试题【由浅入深】2022版","uri":"/go%E8%AF%AD%E8%A8%80%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":["English"],"content":"长荣海运年终奖发40个月薪、国际大事学习笔记","date":"2022-10-11","objectID":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/","tags":["Bilibili","notes","morning-english"],"title":"【英语晨读】长荣海运年终奖发40个月薪、国际大事","uri":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/"},{"categories":["English"],"content":"阅读原文 【视频】【英文晨读15分钟】一个人alone学英语（2022年版 | 持续更新） ","date":"2022-10-11","objectID":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/:1:0","tags":["Bilibili","notes","morning-english"],"title":"【英语晨读】长荣海运年终奖发40个月薪、国际大事","uri":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/"},{"categories":["English"],"content":"1.长荣海运年终奖发 40 个月薪、国际大事 Evergreen reportedly doles out generous year-end bonuses for employees 据报道，长荣为员工发放丰厚的年终奖 Evergreen Marine(美[məˈrin]英[məˈriːn]) Corp, the largest container shipping company in Taiwan, reportedly doled out year-end bonuses of as much as 40 months’ wages to some of its employees on Thursday. 据报道，台湾最大的货柜运输公司-长荣海运集团，在周四为部分员工发放了 高达40个月的薪水的年终奖。 According to local media reports, some Evergreen Marine employees were rumored sb be rumored: 据传某人… e.g. The girl was unhappy for being rumored to have a boyfriend. to have each received some NT$2 million(US$72,312) in bonus. 据当地媒体报道，据传长荣海运的一些员工每人获得了约200万新台币的奖金。 A couple who were both entry-level supervisors at Evergreen told China Times Thursday that they received a combined NT$5 million year-end bonus. The two said they earn a base salary of earn a base salary of:底薪是… e.g I earn a base salary of 1800 yuan in our company. NT60,000 and that they have been working at the company for over 10 years. 一对同为长荣的入门级主管夫妇周四告诉中国时报，他们加起来共获得了5百万新台币的年终奖。两人称他们底薪6W新台币并且已在公司工作超过10年。 The shipping giant, however, declined to confirm the number of months except to except to: 只是… e.g. They do nothing except to say everything will be fine. say that employees each got different amounts and were compensated accordingly as the bonus was based on perfromance. 然而这家海运巨头拒绝公开奖金月数，只说员工每个人都得到不同的金额并且得到相应的报酬，因为奖金是基于绩效的。 1.1巩固练习 ✨ 按照描述写出相应的单词： A regular amount of money that you earn,usually every month,for work or services. --查看答案-- wage connected with the sea and creatures and plants that live there. --查看答案-- marine an extra of money that is added to your payment, especially to sb’s wages as reward. --查看答案-- bonus to pay sb money because they have suffered some damage,loss,injured, etc. --查看答案-- compensate 🎀 请翻译以下内容 今年，他们公司给他们部门每个人发放了1000块奖金。 This year, their company doled out 1000 bonus for everyone in their department. 这个月的花费超出预算整整300块。 The expenditure in this month exceeded the budget as much as 300 yuan. 据说这个新来的实习生是经理的亲戚。 The new intern was rumored to a relative of the manager. 他购买了一张入门级别的显卡。 He bought an entry-level Graphics card. 新入职的同事的底薪统一为3000块。 The base salary of every newly employed is always 3000 yuan. 这家游戏的运营拒绝透漏新角色的任何信息。 The operation department of this game declined to comfirm any information about the new character. 完成任务后，他获得了相应的报酬。 He got compensated accordingly after the task was done. ","date":"2022-10-11","objectID":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/:1:1","tags":["Bilibili","notes","morning-english"],"title":"【英语晨读】长荣海运年终奖发40个月薪、国际大事","uri":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/"},{"categories":["English"],"content":"2. 南非议会被烧毁（South Africa’s parliament burns） A large fire damaged much of the Houses of Parliament on Sunday. 周日，一场大火烧毁了议会大厦的大部分地方。 Officials warned that the damage to the historic(有历史意义的，historical：古老的) complex would be extensive. 官员警告说，历史性建筑群的损失无疑是广泛的。 Officials said the fire spread from an office space on the third of a building adjacent(英[əˈdʒeɪsnt] 美[əˈdʒeɪsnt] ) to the old National Assembly building. 官员说，大火从靠近旧国会大楼的一栋大楼三楼的一个办公空间蔓延开来的。 Cape Town’s Fire and rescue Service spokesman warned that the buildings themselves were at risk of collapse, given the intense heat of the fire. 开普敦的消防和救援服务发言人警告说，鉴于这个火势猛烈，建筑本身存在倒塌的风险 2.1 巩固练习 ✨ 按照描述写出相应的单词： a group of buildings of a similar type together in one place. --查看答案-- complex 🎀 请翻译以下内容 这院子的大部分的地方都是闲置的。 Much of the yard is unoccupied. 不佩戴口罩出门存在感染新型冠状病毒的风险。 Go outside without wearing a mask was at risk of contracting covid-19. 鉴于他的伤情，教练决定让他回家养伤。 Given his condition of injury, the coach decided to let him go home to recuperate. 由于火势凶猛，灭火行动一时难以开展。 Given the intense heat of fire, it is difficult to control the fire at the moment. ","date":"2022-10-11","objectID":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/:1:2","tags":["Bilibili","notes","morning-english"],"title":"【英语晨读】长荣海运年终奖发40个月薪、国际大事","uri":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/"},{"categories":["English"],"content":"3. 欧盟考虑一个非自由主义的领导人是否为同一阵线(E.U considers whether an illiberal leader belongs) Viktor Orban, Hungary’s prime minister, proudly refers to his country as refer to … as: 把…看作/称为… e.g. He refers to Jane as his grilfriend. “illiberal state.” Yet he has long been treated as just another leader by the Europe Union, which holds itself up as a model of human rights and the rule of law. 匈牙利总理Vitor Orban自豪地称他的国家是一个“非自由主义国家”。然而，长期以来，他被欧盟视为仅仅是另一个欧盟的领导人，欧盟则将自己视为人权和法治的典范。 But as Orban has continued to consolidate power and weaken his country’s democratic(英[ˌdeməˈkrætɪk]美[ˌdeməˈkrætɪk]) institutions, the bloc is trying to rein him in. Early this year, the European Court of Justice will issue a decision on whether the union has the authority to make its funds to memeber states conditional on conditional on: 以…为条件 e.g. His compromise is conditional on gaining a lot of money. meeting the bloc’s core values. Doing so may block Hungary from billions of euros block sb. from sths: 阻止某人获得某物 e.g. His aunt is trying to block him from a legacy of $500,00 . 但是，随着Orban继续巩固权力并削弱其他国家的民主机构，欧盟试图抑制他。今年年初，欧洲法院就欧盟是否有权以符合欧盟核心价值观为条件向成员国提供资金而做出裁决。这样做可能会阻止匈牙利获得数十亿的资金。 3.1 巩固练习 ✨ 按照描述写出相应的单词： to make a position of power or success so that it is more likely to continue. --查看答案-- consolidate 🎀 请翻译以下内容 他们以兄弟相称。 They refer each other as brother. 他常常把自己视为公司的接班人。 He offten hold himself up as a succesor of the company. 他试图抑制他弟弟的所作所为。 He is trying to rein his brother in what he did. 公司将开会就是否录用他做出表态。 The company will issue a decision on whether hiring him at a meetting. 他以这个庄园作为条件帮助她 His help to her is conditional on this manor. ","date":"2022-10-11","objectID":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/:1:3","tags":["Bilibili","notes","morning-english"],"title":"【英语晨读】长荣海运年终奖发40个月薪、国际大事","uri":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/"},{"categories":["English"],"content":"4. 菲律宾对未接种疫苗的人实行隔离-A lockdown for the unvaccinated in the Philippines The Philippines will bar all unvaccinated residents from leaving their homes, except for essential reassons, in Manila and the surrounding areas. The lockdown is in response to post-holiday spike in Covid-19 cases. 菲律宾将 禁止 bar sb. from sth.: 禁止某人做某事 e.g. Her monther bar her from leaving home. 马尼拉及周边地区未接种疫苗的剧名离开家门，除非有必要的原因。隔离是为了应对 放假后Covid-19病例的激增。 The lockdown is aimed at both lessening the country’s caseload and encouraging vaccinations. Health officials have suggested that vaccine complacency was behind the latest rise in infections. “Despite the availability of vaccines, there is number of individuals who adamantly opt not to be vacinated”, the Metropolitan Manila Development Authority said in a statment. 隔离的目的是减少该国的病例数和鼓励接种疫苗。卫生官员表示，最近感染率上升背后的原因是对疫苗政策过于自满。马尼拉市发展局在一份声明中说：“尽管有疫苗，仍然有一些人坚决选择不接种。 4.1 巩固练习 ✨ 按照描述写出相应的单词： a thin object with a sharp point,especially a pointed piece of metal,wood etc. --查看答案-- spike all the people that a doctor,social worker is responsible for at one time. --查看答案-- caseload a feeling of satisfaction with yourself or with a situation so that you do not think any change is necessary. --查看答案-- cmplacency 🎀 请翻译以下内容 明天的会议所有人都要参加，除非有重要的事情。 Everyone should attend the meeting tomorrow,except for essential reassons. 为了应对这次的比赛，我们做好了充足的准备。 We well prepared in response to this competition. 轻敌是这次失败的主要原因。 Underestimated the enemy is behind our failure at this thime. ","date":"2022-10-11","objectID":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/:1:4","tags":["Bilibili","notes","morning-english"],"title":"【英语晨读】长荣海运年终奖发40个月薪、国际大事","uri":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/"},{"categories":["English"],"content":"5. Omicron给印度带来了似曾相识的感觉-Omicron brings a sense of deja vu to India Just a few months ago, as government leaders vastly underestimated the dangers and publicly flouted official advice, the Delta variant ravaged India. Now, with the rise of Omicron, the mixed signals from the government and rapid spread through cities are fueling a sense of deja vu. 就在几个月前，由于政府领导人大大低估了危险性并公开蔑视官方建议，Delta变体肆虐了印度。现在，随着Omicron的兴起，来自政府的混杂信息和在城市中的快速传播正在助长一种似曾相识的感觉。 As the Omicron wave began last month, Prime Minister Narenra Modi urged the nation to be vigilant. Arvind Kejriwal, the chief minister of the Delhi region, introduced night curfews, shut down movie theaters and slashed capacity in restaurants and public transport. 随着Omicron浪潮在上个月开始，总理Modi敦促全国人民保持警惕。德里地区的首席部长Arind Kejriwal实行了宵禁，关闭了电影院并且削减了餐馆和公共运输的容纳人数。 5.1 巩固练习 ✨ 按照描述写出相应的单词： to think or guess that the amout,cost or size of sth is smaller than it really is. --查看答案-- underestimate to show that you have no respect for a law. --查看答案-- flout to damage sth. badly. --查看答案-- ravage very careful to notice any signs of danger or trouble. --查看答案-- vigilant a law which says that people must not go outside after a particular time at night until the morning. --查看答案-- curfew to make a long cut with a sharp object, especially in a violent way. --查看答案-- slash 🎀 请翻译以下内容 2019-2022 新型冠状病毒肆虐了全球。 Covid-19 ravaged all over the world in 2019-2022. 随着手机的兴起，电脑游戏的用户正在逐年减少。 With the rise of mobile, the users of computer game is lessening year by year. ","date":"2022-10-11","objectID":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/:1:5","tags":["Bilibili","notes","morning-english"],"title":"【英语晨读】长荣海运年终奖发40个月薪、国际大事","uri":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/"},{"categories":["English"],"content":"其他新闻精选 Politicans in Chile are calling for a pasuse in new mining contract for Lithium, which is in high demand for electric car batteries but is raising concerns over the social and environmental risks of minxing. 智利的政界人士呼吁暂停新的锂开采合约，锂对电车电池的需要量很大，但是人民对采矿的社会和环境风险感到担忧。 Britain’s prime minister, Boris Johnson, was rebuked by his ethics adviser over the costly refurbishment of his Downing Street apartment. 英国首相因其在唐宁街公寓的昂贵翻修而受到道德顾问的指责。 Pope Francis said that people who have pets instead of children are being selfish. “It takes away our humanity”, he said. Pop Francis 说养宠物而不养孩子的人是自私的，这种行为夺走了我们的人性。 6.1 巩固练习 ✨ 按照描述写出相应的单词： to speak severely to sb because they have done sth wrong. --查看答案-- rebuke 🎀 请翻译以下内容 他准备对院子进行一次翻新。 He is going to give a refurbishment to the yard. ","date":"2022-10-11","objectID":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/:1:6","tags":["Bilibili","notes","morning-english"],"title":"【英语晨读】长荣海运年终奖发40个月薪、国际大事","uri":"/%E8%8B%B1%E8%AF%AD%E6%99%A8%E8%AF%BB%E4%B8%80/"},{"categories":null,"content":"嗨，大家好 👋 很高兴认识大家！ ","date":"2019-08-02","objectID":"/about/:0:1","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"FixIt 主题的离线缓存页面","date":"0001-01-01","objectID":"/offline/","tags":null,"title":"","uri":"/offline/"},{"categories":null,"content":"FixIt 主题的友链模板 Demo","date":"0001-01-01","objectID":"/friends/","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":" 添加您的 FixIt 网站 您可以通过 创建 PR 将您的 FixIt 网站添加到此页面。（例如：#111）  网站失效、停止维护、不当内容都可能被取消链接！ ","date":"0001-01-01","objectID":"/friends/:0:0","tags":null,"title":"友情链接","uri":"/friends/"}]